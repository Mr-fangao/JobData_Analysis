{"remainingRequest":"E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\src\\views\\personalcenter\\component\\personalCenter.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\src\\views\\personalcenter\\component\\personalCenter.vue","mtime":1605689910770},{"path":"E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\node_modules\\postcss-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\node_modules\\less-loader\\dist\\cjs.js","mtime":1580901133496},{"path":"E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1580901136398},{"path":"E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.shaDe {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  background-color: rgba(0, 0, 0, 0.2);\n}\n",{"version":3,"sources":["personalCenter.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"personalCenter.vue","sourceRoot":"src\\views\\personalcenter\\component","sourcesContent":["<template>\n  <div class=\"echartDemo\">\n    <div class=\"wrap\">\n      <div id=\"map\" style=\"width: 100%; height: 800px;\">\n        <div :style=\"{ height: '800px', width: '100%' }\" ref=\"myEchart\"></div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\r\nimport echarts from \"echarts\";\nimport 'echarts/map/js/china.js';\nimport AreaData from \"./js/data.js\";\nimport EchartsOption from \"./js/optionConfig.js\";\r\n\nexport default {\n  name: \"EchartsDemo\",\n  props: {\n    areaData: {\n      type: Array,\n      default() {\n        return new AreaData();\n      }\n    },\n    option: {\n      type: Object,\n      default() {\n        return new EchartsOption();\n      }\n    },\n    colorList: {\n      type: Array,\n      default() {\n        return [\"#F4E001\", \"#F0805A\", \"#26C0C0\",\"#000000\"];\n      }\n    },\n    cityConfig: {\n      type: Object,\n      default() {\n        return {\n          \n          dataJson: null\n        };\n      }\n    },\n    areaItems: {\n      type: Object,\n      default() {\n        return {\n          \"东城区\": [116.418757, 39.937544],\n          \"西城区\": [116.366794, 39.910309],\n          \"朝阳区\": [116.486409, 39.991489],\n          \"丰台区\": [116.286968, 39.863642],\n          \"石景山区\": [116.170445, 39.974601],\n          \"海淀区\": [116.280316, 40.039074],\n          \"门头沟区\": [115.905381, 40.009183],\n          \"房山区\": [115.701157, 39.735535],\n          \"通州区\": [116.758603, 39.802486],\n          \"顺义区\": [116.753525, 40.128936],\n          \"昌平区\": [116.235906, 40.318085],\n          \"大兴区\": [116.338033, 39.658908],\n          \"怀柔区\": [116.607122, 40.524272],\n          \"平谷区\": [117.112335, 40.244783],\n          \"密云区\": [116.943352, 40.477362],\n          \"延庆区\": [115.985006, 40.465325]\n        };\n      }\n    }\n  },\n  beforeDestroy() {\n    this.myChart.off(\"click\");\n  },\n  data() {\n    return {\n      wrap: null, //包裹框\n      drawBar: null, // 柱状图\n      barWrap: null,\n      shaDe: null, // 遮挡层\n      myChart: null,\n      // 地区坐标\n      selfAreaItems: {},\n      selfAreaData: new AreaData(),\n      selfOption: new EchartsOption()\n    };\n  },\n\n  mounted() {\n    this.init();\n  },\n  methods: {\n    loadMap(mapName, data) {\n      if (data) {\n        console.log(mapName, data, \"mapName, datamapName, data\");\n        echarts.registerMap(mapName, data);\n      }\n    },\n    init() {\n      // console.log(mapJson, \"mapJsonmapJson\");\n\n      this.selfAreaData = JSON.parse(JSON.stringify(this.areaData));\n      this.selfOption = JSON.parse(JSON.stringify(this.option));\n      this.selfColor = JSON.parse(JSON.stringify(this.colorList));\n      this.selfOption = JSON.parse(JSON.stringify(this.option));\n      this.myChart = echarts.init(this.$refs.myEchart);\n      if (this.cityConfig.dataJson) {\n        console.log(this.cityConfig);\n        this.loadMap(this.cityConfig.name, this.cityConfig.dataJson);\n      }\n      this.selfAreaItems = JSON.parse(JSON.stringify(this.areaItems));\n      window.onresize = this.myChart.resize;\n\n      this.myChart.setOption(this.selfOption);\n      // 拖拽跟缩放重置\n      let throttledRenderEachCity = this.throttle(this.renderItems, 0);\n      this.myChart.on(\"geoRoam\", throttledRenderEachCity);\n      this.renderItems();\n      this.itemonClick();\n    },\n    // 缩放和拖拽\n    throttle(fn, delay, debounce) {\n      let currCall;\n      let lastCall = 0;\n      let lastExec = 0;\n      let timer = null;\n      let diff;\n      let scope;\n      let args;\n      delay = delay || 0;\n      function exec() {\n        lastExec = new Date().getTime();\n        timer = null;\n        fn.apply(scope, args || []);\n      }\n\n      let cb = function() {\n        currCall = new Date().getTime();\n        scope = this;\n        args = arguments;\n        diff = currCall - (debounce ? lastCall : lastExec) - delay;\n\n        clearTimeout(timer);\n\n        if (debounce) {\n          timer = setTimeout(exec, delay);\n        } else {\n          if (diff >= 0) {\n            exec();\n          } else {\n            timer = setTimeout(exec, -diff);\n          }\n        }\n\n        lastCall = currCall;\n      };\n\n      return cb;\n    },\n    // 填充 地图点位\n    renderItems() {\n      let option = Object.assign(this.selfOption, {\n        xAxis: [],\n        yAxis: [],\n        grid: [],\n        series: [],\n        tooltip: {\n          trigger: \"item\",\n          axisPointer: {\n            type: \"none\"\n          }\n        }\n      });\n      this.selfAreaData.forEach((item, idx) => {\n        let nodeCoord = this.selfAreaItems[item.areaName];\n        let coord = this.myChart.convertToPixel(\"geo\", nodeCoord);\n        let titleItems = item.DateItems.map(i => i.title);\n        let itemData = item.DateItems.map(i => Number(i.value));\n        console.log(item, this.selfAreaItems, coord);\n        if (coord) {\n          option.xAxis.push({\n            id: idx + item.areaName,\n            gridId: idx + item.areaName,\n            type: \"category\",\n            name: item.areaName,\n            nameLocation: \"middle\",\n            nameGap: 3,\n            splitLine: {\n              show: false\n            },\n            axisTick: {\n              show: false\n            },\n            axisLabel: {\n              show: false\n            },\n            axisLine: {\n              onZero: false,\n              lineStyle: {\n                color: \"#666\"\n              }\n            },\n            data: titleItems,\n            z: 100\n          });\n          option.yAxis.push({\n            id: idx + item.areaName,\n            gridId: idx + item.areaName,\n            type: \"value\",\n            splitLine: {\n              show: false\n            },\n            axisTick: {\n              show: false\n            },\n            axisLabel: {\n              show: false\n            },\n            axisLine: {\n              show: false,\n              lineStyle: {\n                color: \"red\"\n              }\n            },\n            min: 0,\n            max: \"dataMax\"\n          });\n          option.grid.push({\n            id: idx + item.areaName,\n            width: 30,\n            height: 40,\n            left: coord[0] - 15,\n            top: coord[1] - 15,\n            z: 100\n          });\n          option.series.push({\n            id: idx + item.areaName,\n            type: \"bar\",\n            xAxisId: idx + item.areaName,\n            yAxisId: idx + item.areaName,\n            barGap: 0,\n            barCategoryGap: 0,\n            data: itemData,\n            z: 100,\n            itemStyle: {\n              normal: {\n                color: params => {\n                  // build a color map as your need.\n                  let color = this.selfColor[params.dataIndex];\n                  return color;\n                }\n              },\n              opacity: 0,\n              emphasis: {\n                label: {\n                  show: false\n                }\n              }\n            }\n          });\n        }\n      });\n      this.myChart.setOption(option);\n    },\n    // 点击显示柱状图\n    itemonClick() {\n      this.myChart.on(\"click\", e => {\n        if (e.componentSubType == \"bar\") {\n          this.barWrap = document.createElement(\"div\");\n          this.drawBar = document.createElement(\"div\");\n          this.wrap = document.getElementsByClassName(\"wrap\")[0];\n          // 先清除所有柱状图\n          // $(\".tongJiTu\").remove();\n          // 创建遮挡层\n          this.creatWrap();\n          // 创建柱状图容器\n          this.barWrap.id = \"bar-wrap\";\n          this.barWrap.className = \"bar-wrap\";\n          this.drawBar.className = \"zhuzhuang\";\n          let divX = this.getMousePos()[\"x\"];\n          let divY = this.getMousePos()[\"y\"];\n          this.barWrap.setAttribute(\n            \"style\",\n            `width: 350px; height: 180px;border: 1px solid #ccc;position:absolute;top: ${divY}px;left:${divX}px`\n          );\n          this.drawBar.setAttribute(\"style\", `width: 100%; height: 100%`);\n          // 创建柱状图\n          this.wrap.appendChild(this.barWrap);\n          this.barWrap.appendChild(this.drawBar);\n          this.zhuZhuangTu(e);\n          // // 点击遮挡层消失\n          this.clearWrap();\n        }\n        return;\n      });\n    },\n    // 获取横纵坐标\n    getMousePos(e) {\n      e = event || window.event;\n      let x = e.clientX;\n      let y = e.clientY;\n      return { x, y };\n    },\n    // 生成柱状图\n    zhuZhuangTu(e) {\n      let index = e.seriesIndex;\n      let bar = echarts.init(this.drawBar);\n      let xTitle = this.selfAreaData[index].DateItems.map(i => i.title);\n      let yValue = this.selfAreaData[index].DateItems.map(i => i.value);\n      let option = {\n        backgroundColor: \"rgba(255,255,255,.3)\",\n        legend: {\n          data: xTitle\n        },\n        xAxis: [\n          {\n            type: \"category\",\n            data: xTitle\n          }\n        ],\n        yAxis: [\n          {\n            splitLine: {\n              show: false\n            },\n            type: \"value\"\n          }\n        ],\n        series: [\n          {\n            type: \"bar\",\n            itemStyle: {\n              normal: {\n                color: function(params) {\n                  let colorList = [\"#F4E001\", \"#F0805A\", \"#26C0C0\",\"#000000\"];\n                  return colorList[params.dataIndex];\n                },\n                label: {\n                  show: true,\n                  position: \"top\",\n                  textStyle: {\n                    color: \"#000\"\n                  }\n                }\n              }\n            },\n            data: yValue\n          }\n        ]\n      };\n      bar.setOption(option);\n    },\n    // 生成遮挡层\n    creatWrap() {\n      this.shaDe = document.createElement(\"div\");\n      this.shaDe.className = \"shaDe\";\n      this.wrap.appendChild(this.shaDe);\n    },\n    // 去掉遮挡层\n    clearWrap() {\n      this.shaDe.addEventListener(\n        \"click\",\n        () => {\n          this.shaDe.remove();\n          this.barWrap.remove();\n          this.drawBar.remove();\n          return false;\n        },\n        false\n      );\n    }\n  }\n};\n</script>\n\n<style lang=\"less\">\n.shaDe {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  background-color: rgba(0, 0, 0, 0.2);\n}\n</style>\n"]}]}