{"remainingRequest":"E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\src\\views\\personalcenter\\component\\echarts\\echartsSimple.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\src\\views\\personalcenter\\component\\echarts\\echartsSimple.vue","mtime":1605704018746},{"path":"E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\node_modules\\postcss-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\node_modules\\less-loader\\dist\\cjs.js","mtime":1580901133496},{"path":"E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1580901136398},{"path":"E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.shaDe {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  background-color: rgba(0, 0, 0, 0.2);\n}\n",{"version":3,"sources":["echartsSimple.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"echartsSimple.vue","sourceRoot":"src\\views\\personalcenter\\component\\echarts","sourcesContent":["<template>\n  <div class=\"echartDemo\">\n    <div class=\"wrap\">\n      <div id=\"map\" style=\"width: 100%; height: 800px;\">\n        <div :style=\"{ height: '400px', width: '100%' }\" ref=\"myEchart\"></div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport echarts from \"echarts\";\nimport \"echarts/map/js/province/beijing\";\nimport AreaData from \"./data\";\nimport EchartsOption from \"./optionConfig\";\nexport default {\n  name: \"EchartsDemo\",\n  props: {\n    areaData: {\n      type: Array,\n      default() {\n        return new AreaData();\n      }\n    },\n    option: {\n      type: Object,\n      default() {\n        return new EchartsOption();\n      }\n    },\n    colorList: {\n      type: Array,\n      default() {\n        return [\"#F4E001\", \"#F0805A\", \"#26C0C0\"];\n      }\n    },\n    cityConfig: {\n      type: Object,\n      default() {\n        return {\n          name: \"北京市\",\n          dataJson: null\n        };\n      }\n    },\n    areaItems: {\n      type: Object,\n      default() {\n        return {\n          东城区: [116.418757, 39.937544],\n          西城区: [116.366794, 39.910309],\n          朝阳区: [116.486409, 39.991489],\n          丰台区: [116.286968, 39.863642],\n          石景山区: [116.170445, 39.974601],\n          海淀区: [116.280316, 40.039074],\n          门头沟区: [115.905381, 40.009183],\n          房山区: [115.701157, 39.735535],\n          通州区: [116.758603, 39.802486],\n          顺义区: [116.753525, 40.128936],\n          昌平区: [116.235906, 40.318085],\n          大兴区: [116.338033, 39.658908],\n          怀柔区: [116.607122, 40.524272],\n          平谷区: [117.112335, 40.244783],\n          密云区: [116.943352, 40.477362],\n          延庆区: [115.985006, 40.465325]\n        };\n      }\n    }\n  },\n  beforeDestroy() {\n    this.myChart.off(\"click\");\n  },\n  data() {\n    return {\n      wrap: null, //包裹框\n      drawBar: null, // 柱状图\n      barWrap: null,\n      shaDe: null, // 遮挡层\n      myChart: null,\n      // 地区坐标\n      selfAreaItems: {},\n      selfAreaData: new AreaData(),\n      selfOption: new EchartsOption()\n    };\n  },\n\n  mounted() {\n    this.init();\n  },\n  methods: {\n    loadMap(mapName, data) {\r\n      if (data) {\r\n        console.log(mapName, data, \"mapName, datamapName, data\");\r\n        echarts.registerMap(mapName, data);\r\n      }\r\n    },\r\n    init() {\r\n      // console.log(mapJson, \"mapJsonmapJson\");\r\n    \r\n      this.selfAreaData = JSON.parse(JSON.stringify(this.areaData));\r\n      this.selfOption = JSON.parse(JSON.stringify(this.option));\r\n      this.selfColor = JSON.parse(JSON.stringify(this.colorList));\r\n      this.selfOption = JSON.parse(JSON.stringify(this.option));\r\n      this.myChart = echarts.init(this.$refs.myEchart);\r\n      if (this.cityConfig.dataJson) {\r\n        console.log(this.cityConfig);\r\n        this.loadMap(this.cityConfig.name, this.cityConfig.dataJson);\r\n      }\r\n      this.selfAreaItems = JSON.parse(JSON.stringify(this.areaItems));\r\n      window.onresize = this.myChart.resize;\r\n    \r\n      this.myChart.setOption(this.selfOption);\r\n      // 拖拽跟缩放重置\r\n      let throttledRenderEachCity = this.throttle(this.renderItems, 0);\r\n      this.myChart.on(\"geoRoam\", throttledRenderEachCity);\r\n      this.renderItems();\r\n      this.itemonClick();\r\n    },\r\n    // 缩放和拖拽\r\n    throttle(fn, delay, debounce) {\r\n      let currCall;\r\n      let lastCall = 0;\r\n      let lastExec = 0;\r\n      let timer = null;\r\n      let diff;\r\n      let scope;\r\n      let args;\r\n      delay = delay || 0;\r\n      function exec() {\r\n        lastExec = new Date().getTime();\r\n        timer = null;\r\n        fn.apply(scope, args || []);\r\n      }\r\n    \r\n      let cb = function() {\r\n        currCall = new Date().getTime();\r\n        scope = this;\r\n        args = arguments;\r\n        diff = currCall - (debounce ? lastCall : lastExec) - delay;\r\n    \r\n        clearTimeout(timer);\r\n    \r\n        if (debounce) {\r\n          timer = setTimeout(exec, delay);\r\n        } else {\r\n          if (diff >= 0) {\r\n            exec();\r\n          } else {\r\n            timer = setTimeout(exec, -diff);\r\n          }\r\n        }\r\n    \r\n        lastCall = currCall;\r\n      };\r\n    \r\n      return cb;\r\n    },\r\n    // 填充 地图点位\r\n    renderItems() {\r\n      let option = Object.assign(this.selfOption, {\r\n        xAxis: [],\r\n        yAxis: [],\r\n        grid: [],\r\n        series: [],\r\n        tooltip: {\r\n          trigger: \"item\",\r\n          axisPointer: {\r\n            type: \"none\"\r\n          }\r\n        }\r\n      });\r\n      this.selfAreaData.forEach((item, idx) => {\r\n        let nodeCoord = this.selfAreaItems[item.areaName];\r\n        let coord = this.myChart.convertToPixel(\"geo\", nodeCoord);\r\n        let titleItems = item.DateItems.map(i => i.title);\r\n        let itemData = item.DateItems.map(i => Number(i.value));\r\n        console.log(item, this.selfAreaItems, coord);\r\n        if (coord) {\r\n          option.xAxis.push({\r\n            id: idx + item.areaName,\r\n            gridId: idx + item.areaName,\r\n            type: \"category\",\r\n            name: item.areaName,\r\n            nameLocation: \"middle\",\r\n            nameGap: 3,\r\n            splitLine: {\r\n              show: false\r\n            },\r\n            axisTick: {\r\n              show: false\r\n            },\r\n            axisLabel: {\r\n              show: false\r\n            },\r\n            axisLine: {\r\n              onZero: false,\r\n              lineStyle: {\r\n                color: \"#666\"\r\n              }\r\n            },\r\n            data: titleItems,\r\n            z: 100\r\n          });\r\n          option.yAxis.push({\r\n            id: idx + item.areaName,\r\n            gridId: idx + item.areaName,\r\n            type: \"value\",\r\n            splitLine: {\r\n              show: false\r\n            },\r\n            axisTick: {\r\n              show: false\r\n            },\r\n            axisLabel: {\r\n              show: false\r\n            },\r\n            axisLine: {\r\n              show: false,\r\n              lineStyle: {\r\n                color: \"red\"\r\n              }\r\n            },\r\n            min: 0,\r\n            max: \"dataMax\"\r\n          });\r\n          option.grid.push({\r\n            id: idx + item.areaName,\r\n            width: 30,\r\n            height: 40,\r\n            left: coord[0] - 15,\r\n            top: coord[1] - 15,\r\n            z: 100\r\n          });\r\n          option.series.push({\r\n            id: idx + item.areaName,\r\n            type: \"bar\",\r\n            xAxisId: idx + item.areaName,\r\n            yAxisId: idx + item.areaName,\r\n            barGap: 0,\r\n            barCategoryGap: 0,\r\n            data: itemData,\r\n            z: 100,\r\n            itemStyle: {\r\n              normal: {\r\n                color: params => {\r\n                  // build a color map as your need.\r\n                  let color = this.selfColor[params.dataIndex];\r\n                  return color;\r\n                }\r\n              },\r\n              opacity: 0,\r\n              emphasis: {\r\n                label: {\r\n                  show: false\r\n                }\r\n              }\r\n            }\r\n          });\r\n        }\r\n      });\r\n      this.myChart.setOption(option);\r\n    },\r\n    // 点击显示柱状图\r\n    itemonClick() {\r\n      this.myChart.on(\"click\", e => {\r\n        if (e.componentSubType == \"bar\") {\r\n          this.barWrap = document.createElement(\"div\");\r\n          this.drawBar = document.createElement(\"div\");\r\n          this.wrap = document.getElementsByClassName(\"wrap\")[0];\r\n          // 先清除所有柱状图\r\n          // $(\".tongJiTu\").remove();\r\n          // 创建遮挡层\r\n          this.creatWrap();\r\n          // 创建柱状图容器\r\n          this.barWrap.id = \"bar-wrap\";\r\n          this.barWrap.className = \"bar-wrap\";\r\n          this.drawBar.className = \"zhuzhuang\";\r\n          let divX = this.getMousePos()[\"x\"];\r\n          let divY = this.getMousePos()[\"y\"];\r\n          this.barWrap.setAttribute(\r\n            \"style\",\r\n            `width: 350px; height: 180px;border: 1px solid #ccc;position:absolute;top: ${divY}px;left:${divX}px`\r\n          );\r\n          this.drawBar.setAttribute(\"style\", `width: 100%; height: 100%`);\r\n          // 创建柱状图\r\n          this.wrap.appendChild(this.barWrap);\r\n          this.barWrap.appendChild(this.drawBar);\r\n          this.zhuZhuangTu(e);\r\n          // // 点击遮挡层消失\r\n          this.clearWrap();\r\n        }\r\n        return;\r\n      });\r\n    },\r\n    // 获取横纵坐标\r\n    getMousePos(e) {\r\n      e = event || window.event;\r\n      let x = e.clientX;\r\n      let y = e.clientY;\r\n      return { x, y };\r\n    },\r\n    // 生成柱状图\r\n    zhuZhuangTu(e) {\r\n      let index = e.seriesIndex;\r\n      let bar = echarts.init(this.drawBar);\r\n      let xTitle = this.selfAreaData[index].DateItems.map(i => i.title);\r\n      let yValue = this.selfAreaData[index].DateItems.map(i => i.value);\r\n      let option = {\r\n        backgroundColor: \"rgba(255,255,255,.3)\",\r\n        legend: {\r\n          data: xTitle\r\n        },\r\n        xAxis: [\r\n          {\r\n            type: \"category\",\r\n            data: xTitle\r\n          }\r\n        ],\r\n        yAxis: [\r\n          {\r\n            splitLine: {\r\n              show: false\r\n            },\r\n            type: \"value\"\r\n          }\r\n        ],\r\n        series: [\r\n          {\r\n            type: \"bar\",\r\n            itemStyle: {\r\n              normal: {\r\n                color: function(params) {\r\n                  let colorList = [\"#F75D5D\", \"#59ED4F\", \"#4C91E7\"];\r\n                  return colorList[params.dataIndex];\r\n                },\r\n                label: {\r\n                  show: true,\r\n                  position: \"top\",\r\n                  textStyle: {\r\n                    color: \"#000\"\r\n                  }\r\n                }\r\n              }\r\n            },\r\n            data: yValue\r\n          }\r\n        ]\r\n      };\r\n      bar.setOption(option);\r\n    },\r\n    // 生成遮挡层\r\n    creatWrap() {\r\n      this.shaDe = document.createElement(\"div\");\r\n      this.shaDe.className = \"shaDe\";\r\n      this.wrap.appendChild(this.shaDe);\r\n    },\r\n    // 去掉遮挡层\r\n    clearWrap() {\r\n      this.shaDe.addEventListener(\r\n        \"click\",\r\n        () => {\r\n          this.shaDe.remove();\r\n          this.barWrap.remove();\r\n          this.drawBar.remove();\r\n          return false;\r\n        },\r\n        false\r\n      );\r\n    }\n  }\n};\n</script>\n\n<style lang=\"less\">\n.shaDe {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  background-color: rgba(0, 0, 0, 0.2);\n}\n</style>\n"]}]}