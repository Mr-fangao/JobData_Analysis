{"remainingRequest":"C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\src\\map\\api\\js\\convert\\GGeoJson2Geometry.js","dependencies":[{"path":"C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\src\\map\\api\\js\\convert\\GGeoJson2Geometry.js","mtime":1563098587000},{"path":"C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1580901136398},{"path":"C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport _classCallCheck from \"C:\\\\Users\\\\asus\\\\Desktop\\\\GIS\\u76F8\\u5173\\u6BD4\\u8D5B\\\\03 \\u8BA1\\u7B97\\u673A\\u8BBE\\u8BA1\\u5927\\u8D5B(\\u521A\\u5F00\\u59CB)\\\\03 \\u7CFB\\u7EDF\\u8FD0\\u884C\\u4EE3\\u7801\\\\Code\\\\\\u524D\\u7AEF\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\asus\\\\Desktop\\\\GIS\\u76F8\\u5173\\u6BD4\\u8D5B\\\\03 \\u8BA1\\u7B97\\u673A\\u8BBE\\u8BA1\\u5927\\u8D5B(\\u521A\\u5F00\\u59CB)\\\\03 \\u7CFB\\u7EDF\\u8FD0\\u884C\\u4EE3\\u7801\\\\Code\\\\\\u524D\\u7AEF\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/createClass\";\n\nvar GeoJsonToGeometry =\n/*#__PURE__*/\nfunction () {\n  function GeoJsonToGeometry() {\n    _classCallCheck(this, GeoJsonToGeometry);\n  }\n\n  _createClass(GeoJsonToGeometry, [{\n    key: \"point\",\n    value: function point(options) {\n      return new Promise(function (resolve) {\n        mapApi.esriApi.GetPoint().then(function (Point) {\n          var pt = options.geometry.coordinates;\n          var json = {\n            x: pt[0],\n            y: pt[1],\n            spatialReference: options.spatialReference\n          };\n          var point = new Point(json);\n          resolve(point);\n        });\n      });\n    }\n  }, {\n    key: \"polyLine\",\n    value: function polyLine(options) {\n      return new Promise(function (resolve) {\n        mapApi.esriApi.GetPolyline().then(function (Polyline) {\n          var points = options.geometry.coordinates;\n          var json = {\n            paths: points,\n            spatialReference: options.spatialReference\n          };\n          var polyLine = new Polyline(json);\n          resolve(polyLine);\n        });\n      });\n    }\n  }, {\n    key: \"multiPolyLine\",\n    value: function multiPolyLine(options) {\n      return new Promise(function (resolve) {\n        mapApi.esriApi.GetPolyline().then(function (Polyline) {\n          var polyLines = options.geometry.coordinates;\n          var polyLine = new Polyline({\n            paths: polyLines,\n            spatialReference: options.spatialReference\n          });\n          resolve(polyLine);\n        });\n      });\n    }\n  }, {\n    key: \"polygon\",\n    value: function polygon(options) {\n      return new Promise(function (resolve) {\n        mapApi.esriApi.GetPolygon().then(function (Polygon) {\n          var rings = options.geometry.coordinates;\n          var json = {\n            rings: rings,\n            spatialReference: options.spatialReference\n          };\n          var polygon = new Polygon(json);\n          resolve(polygon);\n        });\n      });\n    }\n  }, {\n    key: \"multiPolygon\",\n    value: function multiPolygon(options) {\n      return new Promise(function (resolve) {\n        mapApi.esriApi.GetPolygon().then(function (Polygon) {\n          var rings = options.geometry.coordinates;\n          var json = {\n            rings: rings,\n            spatialReference: options.spatialReference\n          };\n          var polygon = new Polygon(json);\n          resolve(polygon);\n        });\n      });\n    }\n  }]);\n\n  return GeoJsonToGeometry;\n}();\n\nvar GGeoJsonToGeometry =\n/*#__PURE__*/\nfunction () {\n  function GGeoJsonToGeometry() {\n    _classCallCheck(this, GGeoJsonToGeometry);\n  }\n\n  _createClass(GGeoJsonToGeometry, [{\n    key: \"parse\",\n    value: function parse(options) {\n      var geometry = options.geometry;\n      var type = geometry.type.toLowerCase();\n      var geoJsonToGeometry = new GeoJsonToGeometry();\n\n      switch (type.replace(\" \", \"\")) {\n        case \"point\":\n        case \"multipoint\":\n          return geoJsonToGeometry.point(options);\n\n        case \"linestring\":\n          return geoJsonToGeometry.polyLine(options);\n\n        case \"multilinestring\":\n          return geoJsonToGeometry.multiPolyLine(options);\n\n        case \"polygon\":\n          return geoJsonToGeometry.polygon(options);\n\n        case \"multipolygon\":\n          return geoJsonToGeometry.multiPolygon(options);\n\n        default:\n          return new Promise(function (resolve) {\n            resolve(null);\n          });\n      }\n    }\n  }]);\n\n  return GGeoJsonToGeometry;\n}();\n\nexport { GGeoJsonToGeometry as default };",{"version":3,"sources":["C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\src\\map\\api\\js\\convert\\GGeoJson2Geometry.js"],"names":["GeoJsonToGeometry","options","Promise","resolve","mapApi","esriApi","GetPoint","then","pt","geometry","coordinates","json","x","y","spatialReference","point","Point","GetPolyline","points","paths","polyLine","Polyline","polyLines","GetPolygon","Polygon","rings","polygon","GGeoJsonToGeometry","type","toLowerCase","geoJsonToGeometry","replace","multiPolyLine","multiPolygon"],"mappings":"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","sourcesContent":["class GeoJsonToGeometry {\n  point(options) {\n    return new Promise(function (resolve) {\n      mapApi.esriApi.GetPoint().then(Point => {\n        var pt = options.geometry.coordinates\n        var json = {\n          x: pt[0],\n          y: pt[1],\n          spatialReference: options.spatialReference\n        };\n\n        var point = new Point(json);\n        resolve(point);\n      })\n    });\n  }\n\n  polyLine(options) {\n    return new Promise(function (resolve) {\n      mapApi.esriApi.GetPolyline().then(Polyline => {\n        var points = options.geometry.coordinates;\n        var json = {\n          paths: points,\n          spatialReference: options.spatialReference\n        };\n        var polyLine = new Polyline(json);\n        resolve(polyLine);\n      });\n    });\n  }\n\n  multiPolyLine(options) {\n    return new Promise(function (resolve) {\n      mapApi.esriApi.GetPolyline().then(Polyline => {\n        var polyLines = options.geometry.coordinates;\n        var polyLine = new Polyline({\n          paths: polyLines,\n          spatialReference: options.spatialReference\n        });\n        resolve(polyLine);\n      });\n    });\n  }\n\n  polygon(options) {\n    return new Promise(function (resolve) {\n      mapApi.esriApi.GetPolygon().then((Polygon) => {\n        var rings = options.geometry.coordinates;\n        var json = {\n          rings: rings,\n          spatialReference: options.spatialReference\n        };\n        var polygon = new Polygon(json);\n        resolve(polygon);\n      });\n    });\n  }\n\n  multiPolygon(options) {\n    return new Promise(function (resolve) {\n      mapApi.esriApi.GetPolygon().then((Polygon) => {\n        var rings = options.geometry.coordinates;\n        var json = {\n          rings: rings,\n          spatialReference: options.spatialReference\n        };\n        var polygon = new Polygon(json);\n        resolve(polygon);\n      });\n    });\n  }\n}\n\nexport default class GGeoJsonToGeometry {\n  parse(options) {\n    let geometry = options.geometry;\n    let type = geometry.type.toLowerCase();\n    let geoJsonToGeometry = new GeoJsonToGeometry();\n    switch (type.replace(\" \", \"\")) {\n      case \"point\":\n      case \"multipoint\":\n        return geoJsonToGeometry.point(options);\n      case \"linestring\":\n        return geoJsonToGeometry.polyLine(options);\n      case \"multilinestring\":\n        return geoJsonToGeometry.multiPolyLine(options);\n      case \"polygon\":\n        return geoJsonToGeometry.polygon(options);\n      case \"multipolygon\":\n        return geoJsonToGeometry.multiPolygon(options);\n      default:\n        return new Promise(function (resolve) {\n          resolve(null);\n        });\n    }\n  }\n}\n"]}]}