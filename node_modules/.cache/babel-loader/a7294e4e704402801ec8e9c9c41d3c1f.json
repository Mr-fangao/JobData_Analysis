{"remainingRequest":"C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\src\\map\\api\\js\\GDrawGraphic.js","dependencies":[{"path":"C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\src\\map\\api\\js\\GDrawGraphic.js","mtime":1563098587000},{"path":"C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1580901136398},{"path":"C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\nimport _classCallCheck from \"C:\\\\Users\\\\asus\\\\Desktop\\\\GIS\\u76F8\\u5173\\u6BD4\\u8D5B\\\\03 \\u8BA1\\u7B97\\u673A\\u8BBE\\u8BA1\\u5927\\u8D5B(\\u521A\\u5F00\\u59CB)\\\\03 \\u7CFB\\u7EDF\\u8FD0\\u884C\\u4EE3\\u7801\\\\Code\\\\\\u524D\\u7AEF\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\asus\\\\Desktop\\\\GIS\\u76F8\\u5173\\u6BD4\\u8D5B\\\\03 \\u8BA1\\u7B97\\u673A\\u8BBE\\u8BA1\\u5927\\u8D5B(\\u521A\\u5F00\\u59CB)\\\\03 \\u7CFB\\u7EDF\\u8FD0\\u884C\\u4EE3\\u7801\\\\Code\\\\\\u524D\\u7AEF\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/createClass\";\nimport GMapSymbol from \"./GMapSymbol\";\n\nvar GDrawGraphic =\n/*#__PURE__*/\nfunction () {\n  function GDrawGraphic() {\n    _classCallCheck(this, GDrawGraphic);\n  }\n\n  _createClass(GDrawGraphic, [{\n    key: \"markersByList\",\n    value: function markersByList(args) {\n      var layer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var list = args.list || [];\n      var marker = args.marker || false;\n      var name = args.name || null;\n      var extent = args.extent || false;\n      var popup = args.popup || false;\n      var pan = args.pan || false;\n      var mapView = args.mapView;\n      if (list.length === 0) return;\n      mapApi.esriApi.GetGraphic().then(function (Graphic) {\n        var geometryParse = [];\n        list.forEach(function (item, index) {\n          geometryParse.push(mapApi.convert.toGeometryByWKT.parse({\n            wkt: item.Shape,\n            spatialReference: mapView.spatialReference\n          }));\n        });\n        Promise.all(geometryParse).then(function (geometries) {\n          var pts = [];\n          var graphics = [];\n          geometries.forEach(function (geometry, index) {\n            var pt = null;\n\n            if (geometry !== null) {\n              if (geometry.type === \"point\") {\n                pt = geometry;\n              } else {\n                pt = geometry.extent.center;\n              }\n\n              pts.push(pt);\n            }\n\n            var item = list[index];\n            var symbol = GMapSymbol.getMarkerSymbol({\n              name: index + 1\n            });\n            var graphic = new Graphic({\n              geometry: pt,\n              symbol: symbol,\n              attributes: {\n                id: item.pIndex,\n                attr: item,\n                centerPt: pt,\n                marker: true,\n                popup: popup\n              }\n            });\n            graphics.push(graphic);\n          });\n\n          if (layer === null) {\n            mapView.graphics.addMany(graphics);\n          } else {\n            layer.graphics.addMany(graphics);\n          }\n\n          if (extent) {\n            mapApi.geometryUtils.getMaxExtent(geometries).then(function (extent) {\n              mapView.extent = extent.expand(2);\n            });\n          }\n\n          if (popup && list.length > 0) {\n            mapApi.popup.show({\n              mapView: mapView,\n              res: list[0],\n              centerPt: pts[0],\n              pan: pan\n            });\n          }\n        });\n      });\n    }\n  }, {\n    key: \"housesByList\",\n    value: function housesByList(args) {\n      var layer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var list = args.list || [];\n      var marker = args.marker || false;\n      var name = args.name || null;\n      var extent = args.extent || false;\n      var popup = args.popup || false;\n      var pan = args.pan || false;\n      var mapView = args.mapView;\n      if (list.length === 0) return;\n      mapApi.esriApi.GetGraphic().then(function (Graphic) {\n        var geometryParse = [];\n        list.forEach(function (item, index) {\n          geometryParse.push(mapApi.convert.toGeometryByWKT.parse({\n            wkt: item.Shape,\n            spatialReference: mapView.spatialReference\n          }));\n        });\n        Promise.all(geometryParse).then(function (geometries) {\n          var pts = [];\n          var graphics = [];\n          geometries.forEach(function (geometry, index) {\n            var pt = null;\n\n            if (geometry !== null) {\n              if (geometry.type === \"point\") {\n                pt = geometry;\n              } else {\n                pt = geometry.extent.center;\n              }\n\n              pts.push(pt);\n            }\n\n            var item = list[index];\n            var symbol = GMapSymbol.getMarkerPoiSymbol({});\n            var graphic = new Graphic({\n              geometry: pt,\n              symbol: symbol,\n              attributes: {\n                id: item.pIndex,\n                attr: item,\n                centerPt: pt,\n                marker: true,\n                popup: popup\n              }\n            });\n            graphics.push(graphic);\n          });\n\n          if (layer === null) {\n            mapView.graphics.addMany(graphics);\n          } else {\n            layer.graphics.addMany(graphics);\n          }\n\n          if (extent) {\n            mapApi.geometryUtils.getMaxExtent(geometries).then(function (extent) {\n              mapView.extent = extent.expand(2);\n            });\n          }\n\n          if (popup && list.length > 0) {\n            mapApi.popup.show({\n              mapView: mapView,\n              res: list[0],\n              centerPt: pts[0],\n              pan: pan\n            });\n          }\n        });\n      });\n    }\n  }, {\n    key: \"polygonsByList\",\n    value: function polygonsByList(args) {\n      var layer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var mapView = args.mapView;\n      var list = args.list;\n      var extent = args.extent && args.extent === true ? true : false;\n      var popup = args.popup && args.popup === true ? true : false;\n      if (list.length === 0) return;\n      mapApi.esriApi.GetGraphic().then(function (Graphic) {\n        var geometryParse = [];\n        list.forEach(function (item, index) {\n          geometryParse.push(mapApi.convert.toGeometryByWKT.parse({\n            wkt: item.Shape,\n            spatialReference: mapView.spatialReference\n          }));\n        });\n        Promise.all(geometryParse).then(function (geometries) {\n          var graphics = [];\n          geometries.forEach(function (geometry, index) {\n            if (geometry !== null) {\n              var pt = null;\n\n              if (geometry !== null) {\n                if (geometry.type === \"point\") {\n                  pt = geometry;\n                } else {\n                  pt = geometry.extent.center;\n                }\n              }\n\n              if (geometry.type !== \"point\") {\n                var item = list[index];\n                var symbol = GMapSymbol.getSymbol(geometry);\n                var graphic = new Graphic({\n                  geometry: geometry,\n                  symbol: symbol,\n                  attributes: {\n                    id: item.pIndex,\n                    attr: item,\n                    centerPt: pt,\n                    marker: true,\n                    popup: popup\n                  }\n                });\n                graphics.push(graphic);\n              }\n            }\n          });\n\n          if (layer === null) {\n            mapView.graphics.addMany(graphics);\n          } else {\n            layer.graphics.addMany(graphics);\n          }\n\n          if (extent) {\n            setTimeout(function () {\n              mapApi.geometryUtils.getMaxExtent(geometries).then(function (extent) {\n                mapView.extent = extent.expand(2);\n              });\n            }, 100);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"polygonsByGeoJson\",\n    value: function polygonsByGeoJson(args) {\n      var layer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var mapView = args.mapView;\n      var geojson = args.geojson;\n      var list = args.list;\n      var extent = args.extent && args.extent === true ? true : false;\n      mapApi.esriApi.GetGraphic().then(function (Graphic) {\n        var geometryParse = [];\n        list.forEach(function (item, index) {\n          geometryParse.push(mapApi.convert.toGeometryByGeoJson.parse({\n            geometry: item.geometry,\n            spatialReference: mapView.spatialReference\n          }));\n        });\n        Promise.all(geometryParse).then(function (geometries) {\n          var graphics = [];\n          geometries.forEach(function (geometry, index) {\n            var symbol = GMapSymbol.getSymbol(geometry);\n            var graphic = new Graphic({\n              geometry: geometry,\n              symbol: symbol\n            });\n            graphics.push(graphic);\n          });\n\n          if (layer === null) {\n            mapView.graphics.addMany(graphics);\n          } else {\n            layer.graphics.addMany(graphics);\n          } // if (extent) {\n          //   setTimeout(() => {\n          //     mapApi.geometryUtils.getMaxExtent(geometries).then(extent => {\n          //       mapView.extent = extent.expand(2);\n          //     });\n          //   }, 100);\n          // }\n\n        });\n      });\n    }\n  }, {\n    key: \"housesGWRByList\",\n    value: function housesGWRByList(args) {\n      var layer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var list = args.list || [];\n      var marker = args.marker || false;\n      var name = args.name || null;\n      var extent = args.extent || false;\n      var popup = args.popup || false;\n      var pan = args.pan || false;\n      var mapView = args.mapView;\n      if (list.length === 0) return;\n      mapApi.esriApi.GetGraphic().then(function (Graphic) {\n        var geometryParse = [];\n        list.forEach(function (item, index) {\n          geometryParse.push(mapApi.convert.toGeometryByWKT.parse({\n            wkt: item.foreHouseWKT,\n            spatialReference: mapView.spatialReference\n          }));\n        });\n        Promise.all(geometryParse).then(function (geometries) {\n          var pts = [];\n          var graphics = [];\n          geometries.forEach(function (geometry, index) {\n            var pt = null;\n\n            if (geometry !== null) {\n              if (geometry.type === \"point\") {\n                pt = geometry;\n              } else {\n                pt = geometry.extent.center;\n              }\n\n              pts.push(pt);\n            }\n\n            var item = list[index];\n            var symbol = GMapSymbol.getGWRPoiSymbol({});\n            var graphic = new Graphic({\n              geometry: pt,\n              symbol: symbol,\n              attributes: {\n                id: item.pIndex,\n                attr: item,\n                centerPt: pt,\n                marker: true,\n                popup: popup\n              }\n            });\n            graphics.push(graphic);\n          });\n\n          if (layer === null) {\n            mapView.graphics.addMany(graphics);\n          } else {\n            layer.graphics.addMany(graphics);\n          }\n\n          if (extent) {\n            mapApi.geometryUtils.getMaxExtent(geometries).then(function (extent) {\n              mapView.extent = extent.expand(2);\n            });\n          }\n\n          if (popup && list.length > 0) {\n            mapApi.forePoup.show({\n              mapView: mapView,\n              res: list[0],\n              centerPt: pts[0],\n              pan: pan\n            });\n          }\n        });\n      });\n    }\n  }, {\n    key: \"daishouHouse\",\n    value: function daishouHouse(args) {\n      var layer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var list = args.list || [];\n      var marker = args.marker || false;\n      var name = args.name || null;\n      var extent = args.extent || false;\n      var popup = args.popup || false;\n      var pan = args.pan || false;\n      var mapView = args.mapView;\n      if (list.length === 0) return;\n      mapApi.esriApi.GetGraphic().then(function (Graphic) {\n        var geometryParse = [];\n        list.forEach(function (item, index) {\n          geometryParse.push(mapApi.convert.toGeometryByWKT.parse({\n            wkt: item.houseWKT,\n            spatialReference: mapView.spatialReference\n          }));\n        });\n        Promise.all(geometryParse).then(function (geometries) {\n          var pts = [];\n          var graphics = [];\n          geometries.forEach(function (geometry, index) {\n            var pt = null;\n\n            if (geometry !== null) {\n              if (geometry.type === \"point\") {\n                pt = geometry;\n              } else {\n                pt = geometry.extent.center;\n              }\n\n              pts.push(pt);\n            }\n\n            var item = list[index];\n            var symbol = GMapSymbol.getdaishouHouse({});\n            var graphic = new Graphic({\n              geometry: pt,\n              symbol: symbol,\n              attributes: {\n                id: item.pIndex,\n                attr: item,\n                centerPt: pt,\n                marker: true,\n                popup: popup\n              }\n            });\n            graphics.push(graphic);\n          });\n\n          if (layer === null) {\n            mapView.graphics.addMany(graphics);\n          } else {\n            layer.graphics.addMany(graphics);\n          }\n\n          if (extent) {\n            mapApi.geometryUtils.getMaxExtent(geometries).then(function (extent) {\n              mapView.extent = extent.expand(2);\n            });\n          }\n\n          if (popup && list.length > 0) {\n            mapApi.popup.show({\n              mapView: mapView,\n              res: list[0],\n              centerPt: pts[0],\n              pan: pan\n            });\n          }\n        });\n      });\n    }\n  }]);\n\n  return GDrawGraphic;\n}();\n\nexport default new GDrawGraphic();",{"version":3,"sources":["C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\src\\map\\api\\js\\GDrawGraphic.js"],"names":["GMapSymbol","GDrawGraphic","args","layer","list","marker","name","extent","popup","pan","mapView","length","mapApi","esriApi","GetGraphic","then","geometryParse","forEach","item","index","push","convert","toGeometryByWKT","parse","wkt","Shape","spatialReference","Promise","all","pts","graphics","geometries","geometry","pt","type","center","symbol","getMarkerSymbol","graphic","Graphic","attributes","id","pIndex","attr","centerPt","addMany","geometryUtils","getMaxExtent","expand","show","res","getMarkerPoiSymbol","getSymbol","setTimeout","geojson","toGeometryByGeoJson","foreHouseWKT","getGWRPoiSymbol","forePoup","houseWKT","getdaishouHouse"],"mappings":"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","sourcesContent":["import GMapSymbol from \"./GMapSymbol\";\nclass GDrawGraphic {\n  markersByList(args, layer = null) {\n    var list = args.list || [];\n    var marker = args.marker || false;\n    var name = args.name || null;\n    var extent = args.extent || false;\n    var popup = args.popup || false;\n    var pan = args.pan || false;\n    var mapView = args.mapView;\n    if (list.length === 0) return;\n    mapApi.esriApi.GetGraphic().then(Graphic => {\n\n      var geometryParse = [];\n      list.forEach((item, index) => {\n        geometryParse.push(\n          mapApi.convert.toGeometryByWKT.parse({\n            wkt: item.Shape,\n            spatialReference: mapView.spatialReference\n          })\n        );\n      });\n      Promise.all(geometryParse).then(geometries => {\n\n        var pts = [];\n        var graphics = [];\n        geometries.forEach((geometry, index) => {\n          var pt = null;\n          if (geometry !== null) {\n            if (geometry.type === \"point\") {\n              pt = geometry;\n            } else {\n              pt = geometry.extent.center;\n            }\n            pts.push(pt);\n          }\n          var item = list[index];\n          var symbol = GMapSymbol.getMarkerSymbol({\n            name: index + 1\n          });\n          var graphic = new Graphic({\n            geometry: pt,\n            symbol: symbol,\n            attributes: {\n              id: item.pIndex,\n              attr: item,\n              centerPt: pt,\n              marker: true,\n              popup: popup\n            }\n          });\n          graphics.push(graphic);\n        });\n        if (layer === null) {\n          mapView.graphics.addMany(graphics);\n        } else {\n          layer.graphics.addMany(graphics);\n        }\n        if (extent) {\n          mapApi.geometryUtils.getMaxExtent(geometries).then(extent => {\n            mapView.extent = extent.expand(2);\n          });\n        }\n\n        if (popup && list.length > 0) {\n          mapApi.popup.show({\n            mapView: mapView,\n            res: list[0],\n            centerPt: pts[0],\n            pan: pan\n          });\n        }\n      });\n    });\n  }\n  housesByList(args, layer = null) {\n    var list = args.list || [];\n    var marker = args.marker || false;\n    var name = args.name || null;\n    var extent = args.extent || false;\n    var popup = args.popup || false;\n    var pan = args.pan || false;\n    var mapView = args.mapView;\n    if (list.length === 0) return;\n    mapApi.esriApi.GetGraphic().then(Graphic => {\n      var geometryParse = [];\n      list.forEach((item, index) => {\n        geometryParse.push(\n          mapApi.convert.toGeometryByWKT.parse({\n            wkt: item.Shape,\n            spatialReference: mapView.spatialReference\n          })\n        );\n      });\n      Promise.all(geometryParse).then(geometries => {\n        var pts = [];\n        var graphics = [];\n        geometries.forEach((geometry, index) => {\n          var pt = null;\n          if (geometry !== null) {\n            if (geometry.type === \"point\") {\n              pt = geometry;\n            } else {\n              pt = geometry.extent.center;\n            }\n            pts.push(pt);\n          }\n          var item = list[index];\n          var symbol = GMapSymbol.getMarkerPoiSymbol({});\n          var graphic = new Graphic({\n            geometry: pt,\n            symbol: symbol,\n            attributes: {\n              id: item.pIndex,\n              attr: item,\n              centerPt: pt,\n              marker: true,\n              popup: popup\n            }\n          });\n          graphics.push(graphic);\n        });\n        if (layer === null) {\n          mapView.graphics.addMany(graphics);\n        } else {\n          layer.graphics.addMany(graphics);\n        }\n        if (extent) {\n          mapApi.geometryUtils.getMaxExtent(geometries).then(extent => {\n            mapView.extent = extent.expand(2);\n          });\n        }\n\n        if (popup && list.length > 0) {\n          mapApi.popup.show({\n            mapView: mapView,\n            res: list[0],\n            centerPt: pts[0],\n            pan: pan\n          });\n        }\n      });\n    });\n  }\n\n  polygonsByList(args, layer = null) {\n    var mapView = args.mapView;\n    var list = args.list;\n    var extent = args.extent && args.extent === true ? true : false;\n    var popup = args.popup && args.popup === true ? true : false;\n    if (list.length === 0) return;\n    mapApi.esriApi.GetGraphic().then(Graphic => {\n      var geometryParse = [];\n      list.forEach((item, index) => {\n        geometryParse.push(\n          mapApi.convert.toGeometryByWKT.parse({\n            wkt: item.Shape,\n            spatialReference: mapView.spatialReference\n          })\n        );\n      });\n      Promise.all(geometryParse).then(geometries => {\n        var graphics = [];\n        geometries.forEach((geometry, index) => {\n          if (geometry !== null) {\n            var pt = null;\n            if (geometry !== null) {\n              if (geometry.type === \"point\") {\n                pt = geometry;\n              } else {\n                pt = geometry.extent.center;\n              }\n            }\n            if (geometry.type !== \"point\") {\n              var item = list[index];\n              var symbol = GMapSymbol.getSymbol(geometry);\n              var graphic = new Graphic({\n                geometry: geometry,\n                symbol: symbol,\n                attributes: {\n                  id: item.pIndex,\n                  attr: item,\n                  centerPt: pt,\n                  marker: true,\n                  popup: popup\n                }\n              });\n              graphics.push(graphic);\n            }\n          }\n        });\n        if (layer === null) {\n          mapView.graphics.addMany(graphics);\n        } else {\n          layer.graphics.addMany(graphics);\n        }\n\n        if (extent) {\n          setTimeout(() => {\n            mapApi.geometryUtils.getMaxExtent(geometries).then(extent => {\n              mapView.extent = extent.expand(2);\n            });\n          }, 100);\n        }\n      });\n    });\n  }\n\n  polygonsByGeoJson(args, layer = null) {\n    var mapView = args.mapView;\n    var geojson = args.geojson;\n    var list = args.list;\n    var extent = args.extent && args.extent === true ? true : false;\n    mapApi.esriApi.GetGraphic().then(Graphic => {\n      var geometryParse = [];\n      list.forEach((item, index) => {\n        geometryParse.push(\n          mapApi.convert.toGeometryByGeoJson.parse({\n            geometry: item.geometry,\n            spatialReference: mapView.spatialReference\n          })\n        );\n      });\n      Promise.all(geometryParse).then(geometries => {\n        var graphics = [];\n        geometries.forEach((geometry, index) => {\n          var symbol = GMapSymbol.getSymbol(geometry);\n          var graphic = new Graphic({\n            geometry: geometry,\n            symbol: symbol\n          });\n          graphics.push(graphic);\n        });\n        if (layer === null) {\n          mapView.graphics.addMany(graphics);\n        } else {\n          layer.graphics.addMany(graphics);\n        }\n\n        // if (extent) {\n        //   setTimeout(() => {\n        //     mapApi.geometryUtils.getMaxExtent(geometries).then(extent => {\n        //       mapView.extent = extent.expand(2);\n        //     });\n        //   }, 100);\n        // }\n      });\n    });\n  }\n  housesGWRByList(args, layer = null) {\n    var list = args.list || [];\n    var marker = args.marker || false;\n    var name = args.name || null;\n    var extent = args.extent || false;\n    var popup = args.popup || false;\n    var pan = args.pan || false;\n    var mapView = args.mapView;\n    if (list.length === 0) return;\n    mapApi.esriApi.GetGraphic().then(Graphic => {\n      var geometryParse = [];\n      list.forEach((item, index) => {\n        geometryParse.push(\n          mapApi.convert.toGeometryByWKT.parse({\n            wkt: item.foreHouseWKT,\n            spatialReference: mapView.spatialReference\n          })\n        );\n      });\n      Promise.all(geometryParse).then(geometries => {\n        var pts = [];\n        var graphics = [];\n        geometries.forEach((geometry, index) => {\n          var pt = null;\n          if (geometry !== null) {\n            if (geometry.type === \"point\") {\n              pt = geometry;\n            } else {\n              pt = geometry.extent.center;\n            }\n            pts.push(pt);\n          }\n          var item = list[index];\n          var symbol = GMapSymbol.getGWRPoiSymbol({});\n          var graphic = new Graphic({\n            geometry: pt,\n            symbol: symbol,\n            attributes: {\n              id: item.pIndex,\n              attr: item,\n              centerPt: pt,\n              marker: true,\n              popup: popup\n            }\n          });\n          graphics.push(graphic);\n        });\n        if (layer === null) {\n          mapView.graphics.addMany(graphics);\n        } else {\n          layer.graphics.addMany(graphics);\n        }\n        if (extent) {\n          mapApi.geometryUtils.getMaxExtent(geometries).then(extent => {\n            mapView.extent = extent.expand(2);\n          });\n        }\n\n        if (popup && list.length > 0) {\n          mapApi.forePoup.show({\n            mapView: mapView,\n            res: list[0],\n            centerPt: pts[0],\n            pan: pan\n          });\n        }\n      });\n    });\n  }\n\n\n  daishouHouse(args, layer = null) {\n    var list = args.list || [];\n    var marker = args.marker || false;\n    var name = args.name || null;\n    var extent = args.extent || false;\n    var popup = args.popup || false;\n    var pan = args.pan || false;\n    var mapView = args.mapView;\n    if (list.length === 0) return;\n    mapApi.esriApi.GetGraphic().then(Graphic => {\n      var geometryParse = [];\n      list.forEach((item, index) => {\n        geometryParse.push(\n          mapApi.convert.toGeometryByWKT.parse({\n            wkt: item.houseWKT,\n            spatialReference: mapView.spatialReference\n          })\n        );\n      });\n      Promise.all(geometryParse).then(geometries => {\n        var pts = [];\n        var graphics = [];\n        geometries.forEach((geometry, index) => {\n          var pt = null;\n          if (geometry !== null) {\n            if (geometry.type === \"point\") {\n              pt = geometry;\n            } else {\n              pt = geometry.extent.center;\n            }\n            pts.push(pt);\n          }\n          var item = list[index];\n          var symbol = GMapSymbol.getdaishouHouse({});\n          var graphic = new Graphic({\n            geometry: pt,\n            symbol: symbol,\n            attributes: {\n              id: item.pIndex,\n              attr: item,\n              centerPt: pt,\n              marker: true,\n              popup: popup\n            }\n          });\n          graphics.push(graphic);\n        });\n        if (layer === null) {\n          mapView.graphics.addMany(graphics);\n        } else {\n          layer.graphics.addMany(graphics);\n        }\n        if (extent) {\n          mapApi.geometryUtils.getMaxExtent(geometries).then(extent => {\n            mapView.extent = extent.expand(2);\n          });\n        }\n\n        if (popup && list.length > 0) {\n          mapApi.popup.show({\n            mapView: mapView,\n            res: list[0],\n            centerPt: pts[0],\n            pan: pan\n          });\n        }\n      });\n    });\n  }\n\n\n}\n\nexport default new GDrawGraphic();"]}]}