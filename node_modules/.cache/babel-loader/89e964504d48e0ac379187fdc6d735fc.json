{"remainingRequest":"E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\node_modules\\babel-loader\\lib\\index.js!E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\src\\map\\api\\4+\\api\\GMeasureLength.js","dependencies":[{"path":"E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\src\\map\\api\\4+\\api\\GMeasureLength.js","mtime":1563098587000},{"path":"E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1580901136398},{"path":"E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport _slicedToArray from \"E:\\\\00 \\u6BD5\\u4E1A\\u8BBA\\u6587\\\\04 \\u7CFB\\u7EDF\\u4EE3\\u7801\\\\C30 \\u5F00\\u53D1\\u6E90\\u4EE3\\u7801\\\\\\u524D\\u7AEF\\\\jobData_Analysis\\u524D\\u7AEF\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/slicedToArray\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _classCallCheck from \"E:\\\\00 \\u6BD5\\u4E1A\\u8BBA\\u6587\\\\04 \\u7CFB\\u7EDF\\u4EE3\\u7801\\\\C30 \\u5F00\\u53D1\\u6E90\\u4EE3\\u7801\\\\\\u524D\\u7AEF\\\\jobData_Analysis\\u524D\\u7AEF\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/classCallCheck\";\nimport _createClass from \"E:\\\\00 \\u6BD5\\u4E1A\\u8BBA\\u6587\\\\04 \\u7CFB\\u7EDF\\u4EE3\\u7801\\\\C30 \\u5F00\\u53D1\\u6E90\\u4EE3\\u7801\\\\\\u524D\\u7AEF\\\\jobData_Analysis\\u524D\\u7AEF\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/createClass\";\n\n/* eslint-disable */\nimport { esriApi } from \"../GEsriApi\";\n\nvar GMeasureLength =\n/*#__PURE__*/\nfunction () {\n  function GMeasureLength(opt) {\n    var _this = this;\n\n    _classCallCheck(this, GMeasureLength);\n\n    this.view = opt.mapView;\n    this.units = \"meters\"; // meters | feet | kilometers | miles | nautical-miles | yards\n\n    this.isActive = false;\n    this.activeFeature = null;\n    this.finishedFeature = null;\n    this.lineLength = 0;\n    this.tooltipNodes = [];\n    this.body = document.getElementById('viewDiv');\n    this.tooltip = null;\n    this.graphicLayer = null;\n    this.pointerDownListener = null;\n    this.pointerMoveListener = null;\n    this.doubleClickListener = null;\n    this.viewExtentChange = null;\n    this.register();\n    return new Promise(function (resolve) {\n      Promise.all([esriApi.GetGraphicsLayer(), esriApi.GetPolyline(), esriApi.GetGraphic(), esriApi.GetgeometryEngine()]).then(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 4),\n            GraphicsLayer = _ref2[0],\n            Polyline = _ref2[1],\n            Graphic = _ref2[2],\n            geometryEngine = _ref2[3];\n\n        _this.symbol = {\n          type: \"simple-line\",\n          color: \"red\",\n          width: 1.5,\n          style: \"dash\",\n          cap: 'round'\n        };\n        _this.markerSymbol = {\n          type: \"simple-marker\",\n          style: \"circle\",\n          color: \"white\",\n          size: \"10px\",\n          outline: {\n            color: 'red',\n            width: 1\n          }\n        };\n        _this.GraphicsLayer = GraphicsLayer;\n        _this.Polyline = Polyline;\n        _this.geometryEngine = geometryEngine;\n        _this.Graphic = Graphic;\n        resolve(_this);\n      });\n    });\n  }\n\n  _createClass(GMeasureLength, [{\n    key: \"register\",\n    value: function register() {\n      var _this2 = this;\n\n      onemap.pubsub.subscribe(\"clear\", function (e) {\n        _this2.close();\n      });\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      this.view.isEdit = true;\n\n      if (!this.isActive) {\n        this.close();\n        this.createGraphicLayer();\n        this.createTooltipNode();\n        this.activateDraw();\n      } else {\n        this.deactivateDraw();\n        this.clearPolyline();\n      }\n    }\n  }, {\n    key: \"createTooltipNode\",\n    value: function createTooltipNode() {\n      this.tooltip = document.createElement('span');\n      this.tooltip.className = \"onemap-measure tooltip\";\n      this.body.appendChild(this.tooltip);\n    } //创建承载面的图层\n\n  }, {\n    key: \"createGraphicLayer\",\n    value: function createGraphicLayer() {\n      if (this.graphicLayer === null) {\n        this.graphicLayer = new this.GraphicsLayer();\n        this.view.map.add(this.graphicLayer);\n      } else {\n        this.graphicLayer.removeAll();\n      }\n    }\n  }, {\n    key: \"activateDraw\",\n    value: function activateDraw() {\n      var self = this;\n      this.isActive = true;\n      this.clearPolyline();\n      this.finishedFeature = null;\n      this.pointerDownListener = this.view.on(\"pointer-down\", function (pointerDownEvent) {\n        var point = self.view.toMap(pointerDownEvent);\n        self.showMarker(point);\n\n        if (!self.activeFeature) {\n          var line = self.createLine(point, point);\n          self.activeFeature = new self.Graphic({\n            geometry: line,\n            symbol: self.symbol\n          });\n          self.graphicLayer.add(self.activeFeature);\n        } else {\n          var newLine = self.addVertex(self.activeFeature.geometry, point);\n          self.updateFeature(newLine);\n          self.showToolTip(pointerDownEvent.x, pointerDownEvent.y, point, true);\n        }\n      });\n      this.pointerMoveListener = this.view.on(\"pointer-move\", function (event) {\n        self.updateLastVertex(event);\n\n        if (self.activeFeature) {\n          var length = self.measurePolyline(self.activeFeature.geometry);\n          self.showToolTip(event.x, event.y);\n        }\n      });\n      this.doubleClickListener = this.view.on(\"double-click\", function (event) {\n        onemap.pubsub.publish(\"changeCursor\", \"pointer\");\n        event.stopPropagation();\n        self.finishDrawing(event);\n        self.measurePolyline(self.finishedFeature.geometry);\n      });\n      this.viewExtentChange = this.view.watch('extent', function () {\n        self.tooltipNodes.forEach(function (node) {\n          var screenPoint = self.view.toScreen(node.point);\n          node.style.left = screenPoint.x + 10 + \"px\";\n          node.style.top = screenPoint.y + \"px\";\n        });\n      });\n    }\n  }, {\n    key: \"createLine\",\n    value: function createLine(startPosition, endPosition) {\n      var startPointCoordinates = [startPosition.x, startPosition.y];\n      var endPointCoordinates = [endPosition.x, endPosition.y];\n      var line = new this.Polyline({\n        spatialReference: this.view.spatialReference,\n        hasZ: false,\n        hasM: false,\n        paths: [[startPointCoordinates, endPointCoordinates]]\n      });\n      return line;\n    }\n  }, {\n    key: \"addVertex\",\n    value: function addVertex(line, newPoint) {\n      var polyline = line.clone();\n      var lastPointIndex = line.paths[0].length;\n      polyline.insertPoint(0, lastPointIndex, newPoint);\n      return polyline;\n    }\n  }, {\n    key: \"updateLastVertex\",\n    value: function updateLastVertex(pointerMoveEvent) {\n      if (this.activeFeature) {\n        var point = this.view.toMap(pointerMoveEvent);\n        var polyline = this.activeFeature.geometry.clone();\n        var lastPointIndex = polyline.paths[0].length - 1;\n        var updatedLine = polyline.setPoint(0, lastPointIndex, point);\n        this.updateFeature(updatedLine);\n      }\n    }\n  }, {\n    key: \"updateFeature\",\n    value: function updateFeature(polyline) {\n      this.clearPolyline(); // line to measure\n\n      var newFeature = new this.Graphic({\n        geometry: polyline,\n        symbol: this.symbol\n      });\n      this.activeFeature = newFeature;\n      var densifiedGraphic = newFeature.clone();\n      densifiedGraphic.geometry = this.densifyPolyline(newFeature.geometry);\n      this.graphicLayer.add(densifiedGraphic);\n    }\n  }, {\n    key: \"densifyPolyline\",\n    value: function densifyPolyline(geometry) {\n      return geometry;\n    }\n  }, {\n    key: \"measurePolyline\",\n    value: function measurePolyline(polyline) {\n      this.lineLength = this.geometryEngine.planarLength(polyline, this.units).toFixed(2);\n      return Math.abs(this.lineLength);\n    }\n  }, {\n    key: \"finishDrawing\",\n    value: function finishDrawing(event) {\n      this.body.removeChild(this.tooltip);\n      this.tooltip = null;\n      var point = event.mapPoint;\n      var polyline = this.activeFeature.geometry.clone();\n      var finalLine = this.addVertex(polyline, point);\n      this.updateFeature(finalLine);\n      var densifiedPolyline = this.densifyPolyline(finalLine);\n      this.finishedFeature = new this.Graphic({\n        geometry: densifiedPolyline,\n        symbol: this.symbol\n      }); //移除最后一个点\n\n      this.body.removeChild(this.tooltipNodes.pop());\n      this.deactivateDraw();\n    }\n  }, {\n    key: \"deactivateDraw\",\n    value: function deactivateDraw() {\n      this.isActive = false;\n      this.activeFeature = null;\n      this.lineLength = 0;\n      this.pointerDownListener.remove();\n      this.pointerMoveListener.remove();\n      this.doubleClickListener.remove();\n    }\n  }, {\n    key: \"clearPolyline\",\n    value: function clearPolyline() {\n      var polylineGraphic = this.graphicLayer.graphics.find(function (graphic) {\n        return graphic.geometry && graphic.geometry.type === \"polyline\";\n      });\n\n      if (polylineGraphic) {\n        this.graphicLayer.remove(polylineGraphic);\n      }\n    }\n  }, {\n    key: \"showMarker\",\n    value: function showMarker(point) {\n      var markerFeature = new this.Graphic({\n        geometry: point,\n        symbol: this.markerSymbol\n      });\n      this.view.graphics.add(markerFeature);\n    }\n  }, {\n    key: \"showToolTip\",\n    value: function showToolTip(x, y, p, state) {\n      if (state && state == true) {\n        if (this.lineLength > 0) {\n          var newNode = this.tooltip.cloneNode();\n          newNode.innerText = this.lineLength + '米';\n          newNode.point = p;\n          newNode.style.left = x + 10 + \"px\";\n          newNode.style.top = y + \"px\";\n          this.body.appendChild(newNode);\n          this.tooltipNodes.push(newNode);\n        }\n      } else {\n        this.tooltip.innerText = this.lineLength + '米';\n        this.tooltip.style.left = x + 10 + 'px';\n        this.tooltip.style.top = y + 'px';\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (this.viewExtentChange != null) {\n        this.viewExtentChange.remove();\n      }\n\n      this.view.graphics.removeAll();\n\n      if (this.graphicLayer !== null) {\n        this.view.map.remove(this.graphicLayer);\n        this.graphicLayer = null;\n      }\n\n      console.log(this.tooltip);\n      this.tooltipNodes.forEach(function (node) {\n        this.body.removeChild(node);\n      }, this);\n      this.tooltipNodes = [];\n    }\n  }]);\n\n  return GMeasureLength;\n}();\n\nexport { GMeasureLength as default };",{"version":3,"sources":["E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\src\\map\\api\\4+\\api\\GMeasureLength.js"],"names":["esriApi","GMeasureLength","opt","view","mapView","units","isActive","activeFeature","finishedFeature","lineLength","tooltipNodes","body","document","getElementById","tooltip","graphicLayer","pointerDownListener","pointerMoveListener","doubleClickListener","viewExtentChange","register","Promise","all","GetGraphicsLayer","GetPolyline","GetGraphic","GetgeometryEngine","then","GraphicsLayer","Polyline","Graphic","geometryEngine","symbol","type","color","width","style","cap","markerSymbol","size","outline","resolve","onemap","pubsub","subscribe","close","isEdit","createGraphicLayer","createTooltipNode","activateDraw","deactivateDraw","clearPolyline","createElement","className","appendChild","map","add","removeAll","self","on","pointerDownEvent","point","toMap","showMarker","line","createLine","geometry","newLine","addVertex","updateFeature","showToolTip","x","y","event","updateLastVertex","length","measurePolyline","publish","stopPropagation","finishDrawing","watch","forEach","node","screenPoint","toScreen","left","top","startPosition","endPosition","startPointCoordinates","endPointCoordinates","spatialReference","hasZ","hasM","paths","newPoint","polyline","clone","lastPointIndex","insertPoint","pointerMoveEvent","updatedLine","setPoint","newFeature","densifiedGraphic","densifyPolyline","planarLength","toFixed","Math","abs","removeChild","mapPoint","finalLine","densifiedPolyline","pop","remove","polylineGraphic","graphics","find","graphic","markerFeature","p","state","newNode","cloneNode","innerText","push","console","log"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport {\n  esriApi\n} from \"../GEsriApi\"\nexport default class GMeasureLength {\n  constructor(opt) {\n    this.view = opt.mapView;\n    this.units = \"meters\"; // meters | feet | kilometers | miles | nautical-miles | yards\n    this.isActive = false;\n    this.activeFeature = null;\n    this.finishedFeature = null;\n    this.lineLength = 0;\n    this.tooltipNodes = [];\n    this.body = document.getElementById('viewDiv');\n    this.tooltip = null;\n    this.graphicLayer = null;\n\n    this.pointerDownListener = null;\n    this.pointerMoveListener = null;\n    this.doubleClickListener = null;\n    this.viewExtentChange = null;\n    this.register();\n\n    return new Promise(resolve => {\n      Promise.all([\n        esriApi.GetGraphicsLayer(),\n        esriApi.GetPolyline(),\n        esriApi.GetGraphic(),\n        esriApi.GetgeometryEngine(),\n      ]).then(([GraphicsLayer, Polyline, Graphic, geometryEngine]) => {\n        this.symbol = {\n          type: \"simple-line\",\n          color: \"red\",\n          width: 1.5,\n          style: \"dash\",\n          cap: 'round'\n        };\n        this.markerSymbol = {\n          type: \"simple-marker\",\n          style: \"circle\",\n          color: \"white\",\n          size: \"10px\",\n          outline: {\n            color: 'red',\n            width: 1\n          }\n        };\n        this.GraphicsLayer = GraphicsLayer;\n        this.Polyline = Polyline;\n        this.geometryEngine = geometryEngine;\n        this.Graphic = Graphic;\n        resolve(this);\n      });\n    });\n  }\n\n  register() {\n    onemap.pubsub.subscribe(\"clear\", e => {\n      this.close();\n    });\n  }\n\n  start() {\n    this.view.isEdit = true;\n    if (!this.isActive) {\n      this.close();\n      this.createGraphicLayer();\n      this.createTooltipNode();\n      this.activateDraw();\n    } else {\n      this.deactivateDraw();\n      this.clearPolyline();\n    }\n  }\n\n  createTooltipNode() {\n    this.tooltip = document.createElement('span');\n    this.tooltip.className = \"onemap-measure tooltip\";\n    this.body.appendChild(this.tooltip);\n  }\n\n  //创建承载面的图层\n  createGraphicLayer() {\n    if (this.graphicLayer === null) {\n      this.graphicLayer = new this.GraphicsLayer();\n      this.view.map.add(this.graphicLayer);\n    } else {\n      this.graphicLayer.removeAll();\n    }\n  }\n\n  activateDraw() {\n    var self = this;\n    this.isActive = true;\n    this.clearPolyline();\n    this.finishedFeature = null;\n    this.pointerDownListener = this.view.on(\"pointer-down\", function (pointerDownEvent) {\n      var point = self.view.toMap(pointerDownEvent);\n      self.showMarker(point);\n      if (!self.activeFeature) {\n        var line = self.createLine(point, point);\n        self.activeFeature = new self.Graphic({\n          geometry: line,\n          symbol: self.symbol\n        });\n        self.graphicLayer.add(self.activeFeature);\n      } else {\n        var newLine = self.addVertex(self.activeFeature.geometry,\n          point);\n        self.updateFeature(newLine);\n        self.showToolTip(pointerDownEvent.x, pointerDownEvent.y, point, true);\n      }\n    });\n    this.pointerMoveListener = this.view.on(\"pointer-move\", function (event) {\n      self.updateLastVertex(event);\n      if (self.activeFeature) {\n        var length = self.measurePolyline(self.activeFeature.geometry);\n        self.showToolTip(event.x, event.y);\n      }\n    });\n    this.doubleClickListener = this.view.on(\"double-click\", function (event) {\n      onemap.pubsub.publish(\"changeCursor\", \"pointer\");\n      event.stopPropagation();\n      self.finishDrawing(event);\n      self.measurePolyline(self.finishedFeature.geometry);\n    });\n    this.viewExtentChange = this.view.watch('extent', function () {\n      self.tooltipNodes.forEach(function (node) {\n        var screenPoint = self.view.toScreen(node.point);\n        node.style.left = (screenPoint.x + 10) + \"px\";\n        node.style.top = screenPoint.y + \"px\";\n      });\n    });\n  }\n\n  createLine(startPosition, endPosition) {\n    var startPointCoordinates = [\n      startPosition.x,\n      startPosition.y,\n    ];\n    var endPointCoordinates = [\n      endPosition.x,\n      endPosition.y,\n    ];\n\n    var line = new this.Polyline({\n      spatialReference: this.view.spatialReference,\n      hasZ: false,\n      hasM: false,\n      paths: [\n        [\n          startPointCoordinates,\n          endPointCoordinates\n        ]\n      ]\n    });\n    return line;\n  }\n\n  addVertex(line, newPoint) {\n    var polyline = line.clone();\n    var lastPointIndex = line.paths[0].length;\n    polyline.insertPoint(0, lastPointIndex, newPoint);\n    return polyline;\n  }\n\n  updateLastVertex(pointerMoveEvent) {\n    if (this.activeFeature) {\n      var point = this.view.toMap(pointerMoveEvent);\n      var polyline = this.activeFeature.geometry.clone();\n      var lastPointIndex = polyline.paths[0].length - 1;\n      var updatedLine = polyline.setPoint(0, lastPointIndex, point);\n\n      this.updateFeature(updatedLine);\n    }\n  }\n\n  updateFeature(polyline) {\n    this.clearPolyline();\n    // line to measure\n    var newFeature = new this.Graphic({\n      geometry: polyline,\n      symbol: this.symbol\n    });\n    this.activeFeature = newFeature;\n\n    var densifiedGraphic = newFeature.clone();\n    densifiedGraphic.geometry = this.densifyPolyline(newFeature.geometry);\n    this.graphicLayer.add(densifiedGraphic);\n  }\n\n  densifyPolyline(geometry) {\n    return geometry;\n  }\n\n  measurePolyline(polyline) {\n    this.lineLength = this.geometryEngine.planarLength(polyline, this.units).toFixed(2);\n    return Math.abs(this.lineLength);\n  }\n\n  finishDrawing(event) {\n    this.body.removeChild(this.tooltip);\n    this.tooltip = null;\n\n    var point = event.mapPoint;\n\n    var polyline = this.activeFeature.geometry.clone();\n    var finalLine = this.addVertex(polyline, point);\n    this.updateFeature(finalLine);\n\n    var densifiedPolyline = this.densifyPolyline(finalLine);\n    this.finishedFeature = new this.Graphic({\n      geometry: densifiedPolyline,\n      symbol: this.symbol\n    });\n    //移除最后一个点\n    this.body.removeChild(this.tooltipNodes.pop());\n    this.deactivateDraw();\n  }\n\n  deactivateDraw() {\n    this.isActive = false;\n    this.activeFeature = null;\n    this.lineLength = 0;\n\n    this.pointerDownListener.remove();\n    this.pointerMoveListener.remove();\n    this.doubleClickListener.remove();\n  }\n\n  clearPolyline() {\n    var polylineGraphic = this.graphicLayer.graphics.find(function (graphic) {\n      return graphic.geometry && graphic.geometry.type ===\n        \"polyline\";\n    });\n\n    if (polylineGraphic) {\n      this.graphicLayer.remove(polylineGraphic);\n    }\n  }\n\n  showMarker(point) {\n    var markerFeature = new this.Graphic({\n      geometry: point,\n      symbol: this.markerSymbol\n    });\n    this.view.graphics.add(markerFeature);\n  }\n\n  showToolTip(x, y, p, state) {\n    if (state && state == true) {\n      if (this.lineLength > 0) {\n        var newNode = this.tooltip.cloneNode();\n        newNode.innerText = this.lineLength + '米';\n        newNode.point = p;\n        newNode.style.left = (x + 10) + \"px\";\n        newNode.style.top = y + \"px\";\n        this.body.appendChild(newNode);\n        this.tooltipNodes.push(newNode);\n      }\n    } else {\n      this.tooltip.innerText = this.lineLength + '米';\n      this.tooltip.style.left = (x + 10) + 'px';\n      this.tooltip.style.top = y + 'px';\n    }\n  }\n\n  close() {\n    if (this.viewExtentChange != null) {\n      this.viewExtentChange.remove();\n    }\n    this.view.graphics.removeAll();\n    if (this.graphicLayer !== null) {\n      this.view.map.remove(this.graphicLayer);\n      this.graphicLayer = null;\n    }   console.log(this.tooltip)\n    this.tooltipNodes.forEach(function (node) {\n      this.body.removeChild(node);\n    }, this);\n    this.tooltipNodes = [];\n  }\n}"]}]}