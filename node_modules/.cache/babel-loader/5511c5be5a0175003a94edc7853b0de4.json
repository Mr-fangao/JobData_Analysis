{"remainingRequest":"E:\\04 GIS相关比赛\\05 “创青春”比赛(省赛阶段)\\07 系统代码\\jobData_Analysis前端\\node_modules\\babel-loader\\lib\\index.js!E:\\04 GIS相关比赛\\05 “创青春”比赛(省赛阶段)\\07 系统代码\\jobData_Analysis前端\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\04 GIS相关比赛\\05 “创青春”比赛(省赛阶段)\\07 系统代码\\jobData_Analysis前端\\src\\map\\components\\MapLayerView.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\04 GIS相关比赛\\05 “创青春”比赛(省赛阶段)\\07 系统代码\\jobData_Analysis前端\\src\\map\\components\\MapLayerView.vue","mtime":1563098587000},{"path":"E:\\04 GIS相关比赛\\05 “创青春”比赛(省赛阶段)\\07 系统代码\\jobData_Analysis前端\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1580901136398},{"path":"E:\\04 GIS相关比赛\\05 “创青春”比赛(省赛阶段)\\07 系统代码\\jobData_Analysis前端\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\04 GIS相关比赛\\05 “创青春”比赛(省赛阶段)\\07 系统代码\\jobData_Analysis前端\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _defineProperty from \"E:\\\\04 GIS\\u76F8\\u5173\\u6BD4\\u8D5B\\\\05 \\u201C\\u521B\\u9752\\u6625\\u201D\\u6BD4\\u8D5B(\\u7701\\u8D5B\\u9636\\u6BB5)\\\\07 \\u7CFB\\u7EDF\\u4EE3\\u7801\\\\jobData_Analysis\\u524D\\u7AEF\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/defineProperty\";\n\nvar _props$data$watch$com;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// import Server from \"@/core/server\";\n// import GLayer from \"../api/4+/GLayer\";\n// import TreeView from \"./tree/tree\";\nimport { Icon, Tabs, TabPane } from \"iview\"; // import TreeStore from \"./tree/model/tree-store\";\n\nexport default (_props$data$watch$com = {\n  props: {\n    mapView: {\n      type: Object,\n      default: null\n    },\n    layerOpt: {\n      type: Array,\n      default: null\n    },\n    isOut: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      visible: false,\n      tabName: \"layer\",\n      isLayerActive: false,\n      maxHeight: \"570px\",\n      layerList: [],\n      flatState: [],\n      favLayerList: [],\n      recentLayerList: []\n    };\n  },\n  watch: {// flatState: {\n    //   deep: true,\n    //   handler() {\n    //     this.favLayerList = this.flatState\n    //       .filter(obj => obj.node.isFavoriteLayer)\n    //       .map(obj => obj.node);\n    //     this.recentLayerList = this.flatState\n    //       .filter(\n    //         obj => obj.node.isRecentLayer && obj.node.isGroupChecked === false\n    //       )\n    //       .map(obj => obj.node);\n    //   }\n    // }\n  },\n  computed: {// userAccount() {\n    //   return parent.parent.geone.getUserInfo().userAccount || \"\";\n    // }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    //maplayerview\n    this.$root.eventHub.$on(\"controlMapLayerView\", function (isLayerActive) {\n      _this.maxHeight = window.innerHeight - 150 + \"px\"; //服务获取\n      // if (this.layerList.length === 0) {\n      //   var mapLayer = parent.geone.getModuleByName(\"mapLayer\");\n      //   console.log(mapLayer);\n      //   if (mapLayer !== null) {\n      //     Server.get({\n      //       url: mapLayer.serviceUrl\n      //     }).then(rsp => {\n      //       console.log(rsp);\n      //       var treeStore = (this.treeStore = new TreeStore(\n      //         rsp.data.mapLayers,\n      //         this.userAccount\n      //       ));\n      //       this.layerList = treeStore.stateTree;\n      //       console.log(this.layerList);\n      //       this.flatState = treeStore.flatTree;\n      //       console.log(this.flatState);\n      //       this.visible = true;\n      //       this.onInitLayer();\n      //     });\n      //   } else {\n      //     console.log(\"can not find mapLayer module\");\n      //   }\n      // }\n\n      _this.isLayerActive = isLayerActive;\n    }); //是否是外部传入数据\n    // if (this.isOut && this.layerOpt !== null) {\n    //   var treeStore = (this.treeStore = new TreeStore(\n    //     this.layerOpt,\n    //     this.userAccount\n    //   ));\n    //   this.layerList = treeStore.stateTree;\n    //   this.flatState = treeStore.flatTree;\n    //   this.visible = true;\n    // }\n    //layerids\n    // this.userRecentLayerIds =\n\n    localStorage.getItem(\"\".concat(this.userAccount, \"-recent-layer\")) || \"\";\n  },\n  methods: {\n    // onInitLayer() {\n    //   //显示初始化设定显示的图层\n    //   setTimeout(e => {\n    //     var checkNodes = this.flatState\n    //      .filter(\n    //         obj => obj.node.isChecked && obj.node.isGroupChecked === false\n    //       )\n    //       .map(obj => obj.node);\n    //     console.log(checkNodes);\n    //     checkNodes.forEach(node => {\n    //       if (node.isGroupChecked === false) {\n    //         this.onCheckChange({ checked: true, node });\n    //       }\n    //     });\n    //   }, 200);\n    // },\n    // onCheckChange({ checked, node }) {\n    //   debugger;\n    //   //图层显示关闭\n    //   this.$emit(\"node-checked\", { isChecked: checked, node: node });\n    //   if (checked) {\n    //     GLayer.addLayer(this.mapView.map, node);\n    //     if (node.isSupportIQuery) {\n    //       this.mapView.IQueryLayerIds.push(node.id);\n    //     }\n    //     if (this.isOut === false) {\n    //       //写入本地操作日志--10个图层 10*36+(10-1)\n    //       var currentLayerIds = (this.userRecentLayerIds = `${node.id},${\n    //         this.userRecentLayerIds\n    //       }`.substring(0, 369));\n    //       localStorage.setItem(\n    //         `${this.userAccount}-recent-layer`,\n    //         currentLayerIds\n    //       );\n    //     }\n    //   } else {\n    //     GLayer.removeLayer(this.mapView.map, node.id);\n    //     if (node.isSupportIQuery) {\n    //       this.removeLayerId(node.id);\n    //     }\n    //   }\n    //   //控制图例显示\n    //   if (node.legend && node.legend !== \"\") {\n    //     this.$root.eventHub.$emit(\"showLegend\", {\n    //       show: checked,\n    //       label: node.label,\n    //       name: node.legend\n    //     });\n    //   }\n    // },\n    // onGroupCheckChange({ checked, nodes }) {\n    //   debugger;\n    //   nodes.forEach(node => {\n    //     this.onCheckChange({ checked: checked, node });\n    //   });\n    // },\n    // closeAllLayer() {\n    //   this.mapView.IQueryLayerIds = [];\n    //   var checkNodes = this.$refs.tree.getCheckedNodes();\n    //   checkNodes.forEach(node => {\n    //     if (node.isGroupChecked === false) {\n    //       this.onCheckChange({ checked: false, node });\n    //     }\n    //     this.$set(node, \"isChecked\", false);\n    //   });\n    //   //刷新节点\n    // },\n    rebuildTree: function rebuildTree() {},\n    showLayerView: function showLayerView() {\n      debugger;\n      this.isLayerActive = !this.isLayerActive;\n    } // removeLayerId(id) {\n    //   var idx = Array.indexOf(this.mapView.IQueryLayerIds, id);\n    //   this.mapView.IQueryLayerIds.splice(idx, 1);\n    // }\n\n  }\n}, _defineProperty(_props$data$watch$com, \"computed\", {}), _defineProperty(_props$data$watch$com, \"components\", {\n  // TreeView,\n  Icon: Icon,\n  Tabs: Tabs,\n  TabPane: TabPane\n}), _props$data$watch$com);",{"version":3,"sources":["MapLayerView.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;AACA;AACA;AACA,SAAA,IAAA,EAAA,IAAA,EAAA,OAAA,QAAA,OAAA,C,CACA;;AACA;AACA,SAAA;AACA,aAAA;AACA,YAAA,MADA;AAEA,eAAA;AAFA,KADA;AAKA,cAAA;AACA,YAAA,KADA;AAEA,eAAA;AAFA,KALA;AASA,WAAA;AACA,YAAA,OADA;AAEA,eAAA;AAFA;AATA,GADA;AAeA,MAfA,kBAeA;AACA,WAAA;AACA,eAAA,KADA;AAEA,eAAA,OAFA;AAGA,qBAAA,KAHA;AAIA,iBAAA,OAJA;AAKA,iBAAA,EALA;AAMA,iBAAA,EANA;AAOA,oBAAA,EAPA;AAQA,uBAAA;AARA,KAAA;AAUA,GA1BA;AA2BA,SAAA,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA,GA3BA;AA0CA,YAAA,CACA;AACA;AACA;AAHA,GA1CA;AA+CA,SA/CA,qBA+CA;AAAA;;AACA;AACA,SAAA,KAAA,CAAA,QAAA,CAAA,GAAA,CAAA,qBAAA,EAAA,yBAAA;AACA,YAAA,SAAA,GAAA,OAAA,WAAA,GAAA,GAAA,GAAA,IAAA,CADA,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,YAAA,aAAA,GAAA,aAAA;AACA,KA3BA,EAFA,CA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,iBAAA,OAAA,WAAA,KAAA,WAAA,uBAAA,EAAA;AACA,GA1FA;AA2FA,WAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eArEA,yBAqEA,CAAA,CArEA;AAsEA,iBAtEA,2BAsEA;AACA;AACA,WAAA,aAAA,GAAA,CAAA,KAAA,aAAA;AACA,KAzEA,CA0EA;AACA;AACA;AACA;;AA7EA;AA3FA,sDA0KA,EA1KA,wDA6KA;AACA;AACA,YAFA;AAGA,YAHA;AAIA;AAJA,CA7KA","sourcesContent":["<template>\n  <div class=\"layerManager\" v-if=\"isLayerActive\">\n    <tabs v-model=\"tabName\">\n      <span class=\"icon layerClose\" style=\"margin-top: 4px;\" @click=\"closeAllLayer\" title=\"关闭全部图层\" slot=\"extra\"></span>\n      <tab-pane name=\"layer\" label=\"图层\">\n        <section :style=\"{maxHeight:maxHeight}\" v-if=\"visible\" v-show=\"tabName==='layer'\">\n          <!-- <tree-view ref=\"tree\" :mapView=\"mapView\" :treeData=\"layerList\" :flatState=\"flatState\" @on-check-change=\"onCheckChange\" @on-group-check-change=\"onGroupCheckChange\" /> -->\n        </section>\n      </tab-pane>\n      <section :style=\"{maxHeight:maxHeight}\" v-if=\"visible\" v-show=\"tabName==='favour'\">\n        <!-- <tree-view ref=\"treeFav\" :mapView=\"mapView\" :treeData=\"favLayerList\" :flatState=\"flatState\" @on-check-change=\"onCheckChange\" /> -->\n      </section>\n      </tab-pane>\n      <tab-pane name=\"recent\" v-if=\"!isOut\" label=\"最近\">\n        <section :style=\"{maxHeight:maxHeight}\" v-if=\"visible\" v-show=\"tabName==='recent'\">\n          <!-- <tree-view ref=\"treeRecent\" :mapView=\"mapView\" :treeData=\"recentLayerList\" :flatState=\"flatState\" @on-check-change=\"onCheckChange\" /> -->\n        </section>\n      </tab-pane>\n    </tabs>\n  </div>\n</template>\n\n<script>\n// import Server from \"@/core/server\";\n// import GLayer from \"../api/4+/GLayer\";\n// import TreeView from \"./tree/tree\";\nimport { Icon, Tabs, TabPane } from \"iview\";\n// import TreeStore from \"./tree/model/tree-store\";\nexport default {\n  props: {\n    mapView: {\n      type: Object,\n      default: null\n    },\n    layerOpt: {\n      type: Array,\n      default: null\n    },\n    isOut: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      visible: false,\n      tabName: \"layer\",\n      isLayerActive: false,\n      maxHeight: \"570px\",\n      layerList: [],\n      flatState: [],\n      favLayerList: [],\n      recentLayerList: []\n    };\n  },\n  watch: {\n    // flatState: {\n    //   deep: true,\n    //   handler() {\n    //     this.favLayerList = this.flatState\n    //       .filter(obj => obj.node.isFavoriteLayer)\n    //       .map(obj => obj.node);\n    //     this.recentLayerList = this.flatState\n    //       .filter(\n    //         obj => obj.node.isRecentLayer && obj.node.isGroupChecked === false\n    //       )\n    //       .map(obj => obj.node);\n    //   }\n    // }\n  },\n  computed: {\n    // userAccount() {\n    //   return parent.parent.geone.getUserInfo().userAccount || \"\";\n    // }\n  },\n  mounted() {\n    //maplayerview\n    this.$root.eventHub.$on(\"controlMapLayerView\", isLayerActive => {\n      this.maxHeight = window.innerHeight - 150 + \"px\";\n      //服务获取\n      // if (this.layerList.length === 0) {\n      //   var mapLayer = parent.geone.getModuleByName(\"mapLayer\");\n      //   console.log(mapLayer);\n      //   if (mapLayer !== null) {\n      //     Server.get({\n      //       url: mapLayer.serviceUrl\n      //     }).then(rsp => {\n      //       console.log(rsp);\n      //       var treeStore = (this.treeStore = new TreeStore(\n      //         rsp.data.mapLayers,\n      //         this.userAccount\n      //       ));\n      //       this.layerList = treeStore.stateTree;\n      //       console.log(this.layerList);\n      //       this.flatState = treeStore.flatTree;\n      //       console.log(this.flatState);\n      //       this.visible = true;\n      //       this.onInitLayer();\n      //     });\n      //   } else {\n      //     console.log(\"can not find mapLayer module\");\n      //   }\n      // }\n      this.isLayerActive = isLayerActive;\n    });\n    //是否是外部传入数据\n    // if (this.isOut && this.layerOpt !== null) {\n    //   var treeStore = (this.treeStore = new TreeStore(\n    //     this.layerOpt,\n    //     this.userAccount\n    //   ));\n    //   this.layerList = treeStore.stateTree;\n    //   this.flatState = treeStore.flatTree;\n    //   this.visible = true;\n    // }\n    //layerids\n    // this.userRecentLayerIds =\n    localStorage.getItem(`${this.userAccount}-recent-layer`) || \"\";\n  },\n  methods: {\n    // onInitLayer() {\n    //   //显示初始化设定显示的图层\n    //   setTimeout(e => {\n    //     var checkNodes = this.flatState\n    //      .filter(\n    //         obj => obj.node.isChecked && obj.node.isGroupChecked === false\n    //       )\n    //       .map(obj => obj.node);\n    //     console.log(checkNodes);\n    //     checkNodes.forEach(node => {\n    //       if (node.isGroupChecked === false) {\n    //         this.onCheckChange({ checked: true, node });\n    //       }\n    //     });\n    //   }, 200);\n    // },\n    // onCheckChange({ checked, node }) {\n    //   debugger;\n    //   //图层显示关闭\n    //   this.$emit(\"node-checked\", { isChecked: checked, node: node });\n    //   if (checked) {\n    //     GLayer.addLayer(this.mapView.map, node);\n    //     if (node.isSupportIQuery) {\n    //       this.mapView.IQueryLayerIds.push(node.id);\n    //     }\n\n    //     if (this.isOut === false) {\n    //       //写入本地操作日志--10个图层 10*36+(10-1)\n    //       var currentLayerIds = (this.userRecentLayerIds = `${node.id},${\n    //         this.userRecentLayerIds\n    //       }`.substring(0, 369));\n    //       localStorage.setItem(\n    //         `${this.userAccount}-recent-layer`,\n    //         currentLayerIds\n    //       );\n    //     }\n    //   } else {\n    //     GLayer.removeLayer(this.mapView.map, node.id);\n    //     if (node.isSupportIQuery) {\n    //       this.removeLayerId(node.id);\n    //     }\n    //   }\n    //   //控制图例显示\n    //   if (node.legend && node.legend !== \"\") {\n    //     this.$root.eventHub.$emit(\"showLegend\", {\n    //       show: checked,\n    //       label: node.label,\n    //       name: node.legend\n    //     });\n    //   }\n    // },\n    // onGroupCheckChange({ checked, nodes }) {\n    //   debugger;\n    //   nodes.forEach(node => {\n    //     this.onCheckChange({ checked: checked, node });\n    //   });\n    // },\n    // closeAllLayer() {\n    //   this.mapView.IQueryLayerIds = [];\n    //   var checkNodes = this.$refs.tree.getCheckedNodes();\n    //   checkNodes.forEach(node => {\n    //     if (node.isGroupChecked === false) {\n    //       this.onCheckChange({ checked: false, node });\n    //     }\n    //     this.$set(node, \"isChecked\", false);\n    //   });\n    //   //刷新节点\n    // },\n    rebuildTree() {},\n    showLayerView() {\n      debugger;\n      this.isLayerActive = !this.isLayerActive;\n    }\n    // removeLayerId(id) {\n    //   var idx = Array.indexOf(this.mapView.IQueryLayerIds, id);\n    //   this.mapView.IQueryLayerIds.splice(idx, 1);\n    // }\n  },\n  computed:{\n    \n  },\n  components: {\n    // TreeView,\n    Icon,\n    Tabs,\n    TabPane\n  }\n};\n</script>\n\n<style>\n</style>\n"],"sourceRoot":"src\\map\\components"}]}