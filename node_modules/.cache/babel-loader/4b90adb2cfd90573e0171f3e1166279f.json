{"remainingRequest":"C:\\Users\\asus\\Desktop\\GIS相关比赛\\01 GIS省赛(中期检查+收尾)\\04 系统运行代码\\Code\\前端\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\asus\\Desktop\\GIS相关比赛\\01 GIS省赛(中期检查+收尾)\\04 系统运行代码\\Code\\前端\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\asus\\Desktop\\GIS相关比赛\\01 GIS省赛(中期检查+收尾)\\04 系统运行代码\\Code\\前端\\src\\map\\api\\4+\\GDrawBuffer.js","dependencies":[{"path":"C:\\Users\\asus\\Desktop\\GIS相关比赛\\01 GIS省赛(中期检查+收尾)\\04 系统运行代码\\Code\\前端\\src\\map\\api\\4+\\GDrawBuffer.js","mtime":1563098587000},{"path":"C:\\Users\\asus\\Desktop\\GIS相关比赛\\01 GIS省赛(中期检查+收尾)\\04 系统运行代码\\Code\\前端\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1580901136398},{"path":"C:\\Users\\asus\\Desktop\\GIS相关比赛\\01 GIS省赛(中期检查+收尾)\\04 系统运行代码\\Code\\前端\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\asus\\Desktop\\GIS相关比赛\\01 GIS省赛(中期检查+收尾)\\04 系统运行代码\\Code\\前端\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _slicedToArray from \"C:\\\\Users\\\\asus\\\\Desktop\\\\GIS\\u76F8\\u5173\\u6BD4\\u8D5B\\\\01 GIS\\u7701\\u8D5B(\\u4E2D\\u671F\\u68C0\\u67E5+\\u6536\\u5C3E)\\\\04 \\u7CFB\\u7EDF\\u8FD0\\u884C\\u4EE3\\u7801\\\\Code\\\\\\u524D\\u7AEF\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\asus\\\\Desktop\\\\GIS\\u76F8\\u5173\\u6BD4\\u8D5B\\\\01 GIS\\u7701\\u8D5B(\\u4E2D\\u671F\\u68C0\\u67E5+\\u6536\\u5C3E)\\\\04 \\u7CFB\\u7EDF\\u8FD0\\u884C\\u4EE3\\u7801\\\\Code\\\\\\u524D\\u7AEF\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\asus\\\\Desktop\\\\GIS\\u76F8\\u5173\\u6BD4\\u8D5B\\\\01 GIS\\u7701\\u8D5B(\\u4E2D\\u671F\\u68C0\\u67E5+\\u6536\\u5C3E)\\\\04 \\u7CFB\\u7EDF\\u8FD0\\u884C\\u4EE3\\u7801\\\\Code\\\\\\u524D\\u7AEF\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/createClass\";\nimport esriLoad from \"esri-loader\";\n\nvar GDrawbuffer =\n/*#__PURE__*/\nfunction () {\n  function GDrawbuffer(view) {\n    var _this = this;\n\n    _classCallCheck(this, GDrawbuffer);\n\n    this.view = view; // this.buffer = null;\n\n    this.finished = {};\n    return new Promise(function (resolve) {\n      esriLoad.loadModules([\"esri/views/2d/draw/Draw\", \"esri/Graphic\", \"esri/geometry/Point\", \"esri/geometry/geometryEngine\"]).then(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 4),\n            Draw = _ref2[0],\n            Graphic = _ref2[1],\n            Point = _ref2[2],\n            geometryEngine = _ref2[3];\n\n        _this.draw = new Draw({\n          view: view,\n          pointSymbol: {\n            type: \"simple-marker\",\n            // autocasts as new SimpleMarkerSymbol()\n            style: \"circle\",\n            color: \"#8A2BE2\",\n            size: \"16px\"\n          },\n          polygonSymbol: {\n            type: \"simple-fill\",\n            // autocasts as new SimpleFillSymbol()\n            color: [140, 140, 222, 0.5],\n            outline: {\n              color: [0, 0, 0, 0.5],\n              width: 2\n            }\n          }\n        });\n        _this.Graphic = Graphic;\n        _this.geometryEngine = geometryEngine;\n\n        var action = _this.draw.create(\"point\", {\n          mode: \"click\" //点击方式加点\n\n        });\n\n        _this.view.focus(); // 绘制完成事件\n\n\n        action.on(\"draw-complete\", function (evt) {\n          _this.view.isEdit = true;\n\n          _this.view.graphics.removeAll();\n\n          var coordinates = event.coordinates;\n          var point = new Point({\n            hasZ: false,\n            hasM: false,\n            x: coordinates[0],\n            y: coordinates[1],\n            spatialReference: _this.view.spatialReference\n          });\n          var graphic = new _this.Graphic({\n            geometry: point,\n            symbol: {\n              type: \"simple-marker\",\n              // autocasts as new SimpleMarkerSymbol()\n              style: \"square\",\n              color: \"blue\",\n              size: \"8px\",\n              // pixels\n              outline: {\n                // autocasts as new SimpleLineSymbol()\n                color: [255, 255, 0],\n                width: 3 // points\n\n              }\n            }\n          }); // 将绘制的图形添加到view\n\n          _this.view.graphics.add(graphic);\n        });\n        resolve(_this);\n      });\n    });\n  }\n\n  _createClass(GDrawbuffer, [{\n    key: \"on\",\n    value: function on(name, event) {\n      this.finished[name] = event;\n    }\n  }, {\n    key: \"enableCreatePoint\",\n    value: function enableCreatePoint(distance, callback) {\n      var _this2 = this;\n\n      var action = this.draw.create(\"point\", {\n        mode: \"click\" //点击方式加点\n\n      }); // 获取焦点\n\n      this.view.focus(); // 绘制完成事件\n\n      action.on(\"draw-complete\", function (event) {\n        _this2.view.isEdit = true;\n\n        _this2.view.graphics.removeAll();\n\n        var coordinates = event.coordinates;\n        mapApi.esriApi.GetPoint().then(function (Point) {\n          var point = new Point({\n            hasZ: false,\n            hasM: false,\n            x: coordinates[0],\n            y: coordinates[1],\n            spatialReference: _this2.view.spatialReference\n          }); //生成绘制的图形\n\n          mapApi.esriApi.GetGraphic().then(function (Graphic) {\n            var graphic = new Graphic({\n              geometry: point,\n              symbol: {\n                type: \"simple-marker\",\n                style: \"circle\",\n                color: [255, 0, 0],\n                size: 5,\n                outline: {\n                  color: [255, 0, 0],\n                  width: 1\n                }\n              }\n            }); // 将绘制的图形添加到view\n\n            _this2.view.graphics.add(graphic);\n\n            if (event.type == \"draw-complete\") {\n              mapApi.esriApi.GetgeometryEngine().then(function (geometryEngine) {\n                var polySym = {\n                  type: \"simple-fill\",\n                  // autocasts as new SimpleFillSymbol()\n                  color: [140, 140, 222, 0.5],\n                  outline: {\n                    color: [0, 0, 0, 0.5],\n                    width: 2\n                  }\n                };\n                var buffer = geometryEngine.buffer(point, distance, \"kilometers\", false);\n\n                _this2.view.graphics.add(new Graphic({\n                  geometry: buffer,\n                  symbol: polySym\n                }));\n\n                if (callback) {\n                  callback(buffer);\n                }\n              });\n            }\n          });\n        });\n      });\n    } // createPoint(event) {\n    //   console.log(this);\n    //   //获取所有顶点\n    //   this.view.isEdit = true;\n    //   this.view.graphics.removeAll();\n    //   var coordinates = event.coordinates;\n    //   mapApi.esriApi.GetPoint().then(Point => {\n    //     var point = new Point({\n    //       hasZ: false,\n    //       hasM: false,\n    //       x: coordinates[0],\n    //       y: coordinates[1],\n    //       spatialReference: this.view.spatialReference\n    //     })\n    //     //生成绘制的图形\n    //     mapApi.esriApi.GetGraphic().then(Graphic => {\n    //       var graphic = new Graphic({\n    //         geometry: point,\n    //         symbol: {\n    //           type: \"simple-marker\", // autocasts as new SimpleMarkerSymbol()\n    //           style: \"square\",\n    //           color: \"blue\",\n    //           size: \"8px\", // pixels\n    //           outline: { // autocasts as new SimpleLineSymbol()\n    //             color: [255, 255, 0],\n    //             width: 3 // points\n    //           }\n    //         }\n    //       });\n    //       // 将绘制的图形添加到view\n    //       this.view.graphics.add(graphic);\n    //       var _this = this;\n    //       if (event.type == \"draw-complete\") {\n    //         mapApi.esriApi.GetgeometryEngine().then(geometryEngine => {\n    //           var polySym = {\n    //             type: \"simple-fill\", // autocasts as new SimpleFillSymbol()\n    //             color: [140, 140, 222, 0.5],\n    //             outline: {\n    //               color: [0, 0, 0, 0.5],\n    //               width: 2\n    //             }\n    //           };\n    //           var buffer = geometryEngine.buffer(point, 2, \"kilometers\", false);\n    //           window.buffer = buffer;\n    //           console.log(window.buffer);\n    //           this.view.graphics.add(\n    //             new Graphic({\n    //               geometry: buffer,\n    //               symbol: polySym\n    //             })\n    //           );\n    //         })\n    //       }\n    //     })\n    //   })\n    // }\n\n  }]);\n\n  return GDrawbuffer;\n}();\n\nexport { GDrawbuffer as default };",{"version":3,"sources":["C:\\Users\\asus\\Desktop\\GIS相关比赛\\01 GIS省赛(中期检查+收尾)\\04 系统运行代码\\Code\\前端\\src\\map\\api\\4+\\GDrawBuffer.js"],"names":["esriLoad","GDrawbuffer","view","finished","Promise","loadModules","then","Draw","Graphic","Point","geometryEngine","draw","pointSymbol","type","style","color","size","polygonSymbol","outline","width","action","create","mode","focus","on","isEdit","graphics","removeAll","coordinates","event","point","hasZ","hasM","x","y","spatialReference","graphic","geometry","symbol","add","resolve","name","distance","callback","mapApi","esriApi","GetPoint","GetGraphic","GetgeometryEngine","polySym","buffer"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,aAArB;;IACqBC,W;;;AACnB,uBAAYC,IAAZ,EAAkB;AAAA;;AAAA;;AAChB,SAAKA,IAAL,GAAYA,IAAZ,CADgB,CAEhB;;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,WAAO,IAAIC,OAAJ,CAAY,mBAAW;AAC5BJ,eAASK,WAAT,CAAqB,CAAC,yBAAD,EAA4B,cAA5B,EAA4C,qBAA5C,EAAmE,8BAAnE,CAArB,EAAyHC,IAAzH,CAA8H,gBAA4C;AAAA;AAAA,YAA1CC,IAA0C;AAAA,YAApCC,OAAoC;AAAA,YAA3BC,KAA2B;AAAA,YAApBC,cAAoB;;AACxK,cAAKC,IAAL,GAAY,IAAIJ,IAAJ,CAAS;AACnBL,gBAAMA,IADa;AAEnBU,uBAAa;AACXC,kBAAM,eADK;AACY;AACvBC,mBAAO,QAFI;AAGXC,mBAAO,SAHI;AAIXC,kBAAM;AAJK,WAFM;AAQnBC,yBAAe;AACbJ,kBAAM,aADO;AACQ;AACrBE,mBAAO,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAFM;AAGbG,qBAAS;AACPH,qBAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,GAAV,CADA;AAEPI,qBAAO;AAFA;AAHI;AARI,SAAT,CAAZ;AAiBA,cAAKX,OAAL,GAAeA,OAAf;AACA,cAAKE,cAAL,GAAsBA,cAAtB;;AACA,YAAIU,SAAS,MAAKT,IAAL,CAAUU,MAAV,CAAiB,OAAjB,EAA0B;AACrCC,gBAAM,OAD+B,CACvB;;AADuB,SAA1B,CAAb;;AAGA,cAAKpB,IAAL,CAAUqB,KAAV,GAvBwK,CAwBxK;;;AACAH,eAAOI,EAAP,CAAU,eAAV,EAA2B,eAAO;AAChC,gBAAKtB,IAAL,CAAUuB,MAAV,GAAmB,IAAnB;;AACA,gBAAKvB,IAAL,CAAUwB,QAAV,CAAmBC,SAAnB;;AACA,cAAIC,cAAcC,MAAMD,WAAxB;AACA,cAAIE,QAAQ,IAAIrB,KAAJ,CAAU;AACpBsB,kBAAM,KADc;AAEpBC,kBAAM,KAFc;AAGpBC,eAAGL,YAAY,CAAZ,CAHiB;AAIpBM,eAAGN,YAAY,CAAZ,CAJiB;AAKpBO,8BAAkB,MAAKjC,IAAL,CAAUiC;AALR,WAAV,CAAZ;AAOA,cAAIC,UAAU,IAAI,MAAK5B,OAAT,CAAiB;AAC7B6B,sBAAUP,KADmB;AAE7BQ,oBAAQ;AACNzB,oBAAM,eADA;AACiB;AACvBC,qBAAO,QAFD;AAGNC,qBAAO,MAHD;AAINC,oBAAM,KAJA;AAIO;AACbE,uBAAS;AAAE;AACTH,uBAAO,CAAC,GAAD,EAAM,GAAN,EAAW,CAAX,CADA;AAEPI,uBAAO,CAFA,CAEE;;AAFF;AALH;AAFqB,WAAjB,CAAd,CAXgC,CAwBhC;;AACA,gBAAKjB,IAAL,CAAUwB,QAAV,CAAmBa,GAAnB,CAAuBH,OAAvB;AACD,SA1BD;AA2BAI,gBAAQ,KAAR;AACD,OArDD;AAsDD,KAvDM,CAAP;AAwDD;;;;uBAEEC,I,EAAMZ,K,EAAO;AACd,WAAK1B,QAAL,CAAcsC,IAAd,IAAsBZ,KAAtB;AACD;;;sCAEiBa,Q,EAAUC,Q,EAAU;AAAA;;AACpC,UAAIvB,SAAS,KAAKT,IAAL,CAAUU,MAAV,CAAiB,OAAjB,EAA0B;AACrCC,cAAM,OAD+B,CACvB;;AADuB,OAA1B,CAAb,CADoC,CAIpC;;AACA,WAAKpB,IAAL,CAAUqB,KAAV,GALoC,CAMpC;;AACAH,aAAOI,EAAP,CAAU,eAAV,EAA2B,iBAAS;AAClC,eAAKtB,IAAL,CAAUuB,MAAV,GAAmB,IAAnB;;AACA,eAAKvB,IAAL,CAAUwB,QAAV,CAAmBC,SAAnB;;AACA,YAAIC,cAAcC,MAAMD,WAAxB;AACAgB,eAAOC,OAAP,CAAeC,QAAf,GAA0BxC,IAA1B,CAA+B,iBAAS;AACtC,cAAIwB,QAAQ,IAAIrB,KAAJ,CAAU;AACpBsB,kBAAM,KADc;AAEpBC,kBAAM,KAFc;AAGpBC,eAAGL,YAAY,CAAZ,CAHiB;AAIpBM,eAAGN,YAAY,CAAZ,CAJiB;AAKpBO,8BAAkB,OAAKjC,IAAL,CAAUiC;AALR,WAAV,CAAZ,CADsC,CAQtC;;AACAS,iBAAOC,OAAP,CAAeE,UAAf,GAA4BzC,IAA5B,CAAiC,mBAAW;AAC1C,gBAAI8B,UAAU,IAAI5B,OAAJ,CAAY;AACxB6B,wBAAUP,KADc;AAExBQ,sBAAQ;AACNzB,sBAAM,eADA;AAENC,uBAAO,QAFD;AAGNC,uBAAO,CAAC,GAAD,EAAM,CAAN,EAAS,CAAT,CAHD;AAINC,sBAAM,CAJA;AAKNE,yBAAS;AACPH,yBAAO,CAAC,GAAD,EAAM,CAAN,EAAS,CAAT,CADA;AAEPI,yBAAO;AAFA;AALH;AAFgB,aAAZ,CAAd,CAD0C,CAc1C;;AACA,mBAAKjB,IAAL,CAAUwB,QAAV,CAAmBa,GAAnB,CAAuBH,OAAvB;;AACA,gBAAIP,MAAMhB,IAAN,IAAc,eAAlB,EAAmC;AACjC+B,qBAAOC,OAAP,CAAeG,iBAAf,GAAmC1C,IAAnC,CAAwC,0BAAkB;AACxD,oBAAI2C,UAAU;AACZpC,wBAAM,aADM;AACS;AACrBE,yBAAO,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAFK;AAGZG,2BAAS;AACPH,2BAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,GAAV,CADA;AAEPI,2BAAO;AAFA;AAHG,iBAAd;AAQA,oBAAI+B,SAASxC,eAAewC,MAAf,CAAsBpB,KAAtB,EAA6BY,QAA7B,EAAuC,YAAvC,EAAqD,KAArD,CAAb;;AACA,uBAAKxC,IAAL,CAAUwB,QAAV,CAAmBa,GAAnB,CACE,IAAI/B,OAAJ,CAAY;AACV6B,4BAAUa,MADA;AAEVZ,0BAAQW;AAFE,iBAAZ,CADF;;AAMA,oBAAIN,QAAJ,EAAc;AACZA,2BAASO,MAAT;AACD;AACF,eAnBD;AAoBD;AACF,WAtCD;AAuCD,SAhDD;AAiDD,OArDD;AAsDD,K,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;SAxLmBjD,W","sourcesContent":["import esriLoad from \"esri-loader\";\nexport default class GDrawbuffer {\n  constructor(view) {\n    this.view = view;\n    // this.buffer = null;\n    this.finished = {};\n    return new Promise(resolve => {\n      esriLoad.loadModules([\"esri/views/2d/draw/Draw\", \"esri/Graphic\", \"esri/geometry/Point\", \"esri/geometry/geometryEngine\"]).then(([Draw, Graphic, Point, geometryEngine]) => {\n        this.draw = new Draw({\n          view: view,\n          pointSymbol: {\n            type: \"simple-marker\", // autocasts as new SimpleMarkerSymbol()\n            style: \"circle\",\n            color: \"#8A2BE2\",\n            size: \"16px\"\n          },\n          polygonSymbol: {\n            type: \"simple-fill\", // autocasts as new SimpleFillSymbol()\n            color: [140, 140, 222, 0.5],\n            outline: {\n              color: [0, 0, 0, 0.5],\n              width: 2\n            }\n          },\n        });\n        this.Graphic = Graphic\n        this.geometryEngine = geometryEngine\n        var action = this.draw.create(\"point\", {\n          mode: \"click\" //点击方式加点\n        });\n        this.view.focus();\n        // 绘制完成事件\n        action.on(\"draw-complete\", evt => {\n          this.view.isEdit = true;\n          this.view.graphics.removeAll();\n          var coordinates = event.coordinates;\n          var point = new Point({\n            hasZ: false,\n            hasM: false,\n            x: coordinates[0],\n            y: coordinates[1],\n            spatialReference: this.view.spatialReference\n          });\n          var graphic = new this.Graphic({\n            geometry: point,\n            symbol: {\n              type: \"simple-marker\", // autocasts as new SimpleMarkerSymbol()\n              style: \"square\",\n              color: \"blue\",\n              size: \"8px\", // pixels\n              outline: { // autocasts as new SimpleLineSymbol()\n                color: [255, 255, 0],\n                width: 3 // points\n              }\n            }\n          });\n          // 将绘制的图形添加到view\n          this.view.graphics.add(graphic);\n        });\n        resolve(this);\n      })\n    })\n  }\n\n  on(name, event) {\n    this.finished[name] = event;\n  }\n\n  enableCreatePoint(distance, callback) {\n    var action = this.draw.create(\"point\", {\n      mode: \"click\" //点击方式加点\n    });\n    // 获取焦点\n    this.view.focus();\n    // 绘制完成事件\n    action.on(\"draw-complete\", event => {\n      this.view.isEdit = true;\n      this.view.graphics.removeAll();\n      var coordinates = event.coordinates;\n      mapApi.esriApi.GetPoint().then(Point => {\n        var point = new Point({\n          hasZ: false,\n          hasM: false,\n          x: coordinates[0],\n          y: coordinates[1],\n          spatialReference: this.view.spatialReference\n        })\n        //生成绘制的图形\n        mapApi.esriApi.GetGraphic().then(Graphic => {\n          var graphic = new Graphic({\n            geometry: point,\n            symbol: {\n              type: \"simple-marker\",\n              style: \"circle\",\n              color: [255, 0, 0],\n              size: 5,\n              outline: {\n                color: [255, 0, 0],\n                width: 1\n              }\n            }\n          });\n          // 将绘制的图形添加到view\n          this.view.graphics.add(graphic);\n          if (event.type == \"draw-complete\") {\n            mapApi.esriApi.GetgeometryEngine().then(geometryEngine => {\n              var polySym = {\n                type: \"simple-fill\", // autocasts as new SimpleFillSymbol()\n                color: [140, 140, 222, 0.5],\n                outline: {\n                  color: [0, 0, 0, 0.5],\n                  width: 2\n                }\n              };\n              var buffer = geometryEngine.buffer(point, distance, \"kilometers\", false);\n              this.view.graphics.add(\n                new Graphic({\n                  geometry: buffer,\n                  symbol: polySym\n                })\n              );\n              if (callback) {\n                callback(buffer)\n              }\n            })\n          }\n        })\n      })\n    });\n  }\n  // createPoint(event) {\n  //   console.log(this);\n  //   //获取所有顶点\n  //   this.view.isEdit = true;\n  //   this.view.graphics.removeAll();\n  //   var coordinates = event.coordinates;\n  //   mapApi.esriApi.GetPoint().then(Point => {\n  //     var point = new Point({\n  //       hasZ: false,\n  //       hasM: false,\n  //       x: coordinates[0],\n  //       y: coordinates[1],\n  //       spatialReference: this.view.spatialReference\n  //     })\n  //     //生成绘制的图形\n  //     mapApi.esriApi.GetGraphic().then(Graphic => {\n  //       var graphic = new Graphic({\n  //         geometry: point,\n  //         symbol: {\n  //           type: \"simple-marker\", // autocasts as new SimpleMarkerSymbol()\n  //           style: \"square\",\n  //           color: \"blue\",\n  //           size: \"8px\", // pixels\n  //           outline: { // autocasts as new SimpleLineSymbol()\n  //             color: [255, 255, 0],\n  //             width: 3 // points\n  //           }\n  //         }\n  //       });\n  //       // 将绘制的图形添加到view\n  //       this.view.graphics.add(graphic);\n  //       var _this = this;\n  //       if (event.type == \"draw-complete\") {\n  //         mapApi.esriApi.GetgeometryEngine().then(geometryEngine => {\n  //           var polySym = {\n  //             type: \"simple-fill\", // autocasts as new SimpleFillSymbol()\n  //             color: [140, 140, 222, 0.5],\n  //             outline: {\n  //               color: [0, 0, 0, 0.5],\n  //               width: 2\n  //             }\n  //           };\n  //           var buffer = geometryEngine.buffer(point, 2, \"kilometers\", false);\n  //           window.buffer = buffer;\n  //           console.log(window.buffer);\n  //           this.view.graphics.add(\n  //             new Graphic({\n  //               geometry: buffer,\n  //               symbol: polySym\n  //             })\n  //           );\n  //         })\n  //       }\n  //     })\n  //   })\n  // }\n}\n"]}]}