{"remainingRequest":"E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\node_modules\\babel-loader\\lib\\index.js!E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\src\\views\\personalcenter\\component\\testVue\\chartFir.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\src\\views\\personalcenter\\component\\testVue\\chartFir.vue","mtime":1605706308803},{"path":"E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1580901136398},{"path":"E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\00 毕业论文\\04 系统代码\\C30 开发源代码\\前端\\jobData_Analysis前端\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport echarts from \"echarts\";\nimport \"echarts/map/js/province/beijing\";\nimport AreaData from \"./data\";\nimport EchartsOption from \"./optionConfig\";\nexport default {\n  name: \"EchartsDemo\",\n  props: {\n    areaData: {\n      type: Array,\n      default: function _default() {\n        return new AreaData();\n      }\n    },\n    option: {\n      type: Object,\n      default: function _default() {\n        return new EchartsOption();\n      }\n    },\n    colorList: {\n      type: Array,\n      default: function _default() {\n        return [\"#F4E001\", \"#F0805A\", \"#26C0C0\"];\n      }\n    },\n    cityConfig: {\n      type: Object,\n      default: function _default() {\n        return {\n          name: \"北京市\",\n          dataJson: null\n        };\n      }\n    },\n    areaItems: {\n      type: Object,\n      default: function _default() {\n        return {\n          \"东城区\": [116.418757, 39.937544],\n          \"西城区\": [116.366794, 39.910309],\n          \"朝阳区\": [116.486409, 39.991489],\n          \"丰台区\": [116.286968, 39.863642],\n          \"石景山区\": [116.170445, 39.974601],\n          \"海淀区\": [116.280316, 40.039074],\n          \"门头沟区\": [115.905381, 40.009183],\n          \"房山区\": [115.701157, 39.735535],\n          \"通州区\": [116.758603, 39.802486],\n          \"顺义区\": [116.753525, 40.128936],\n          \"昌平区\": [116.235906, 40.318085],\n          \"大兴区\": [116.338033, 39.658908],\n          \"怀柔区\": [116.607122, 40.524272],\n          \"平谷区\": [117.112335, 40.244783],\n          \"密云区\": [116.943352, 40.477362],\n          \"延庆区\": [115.985006, 40.465325]\n        };\n      }\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.myChart.off(\"click\");\n  },\n  data: function data() {\n    return {\n      wrap: null,\n      //包裹框\n      drawBar: null,\n      // 柱状图\n      barWrap: null,\n      shaDe: null,\n      // 遮挡层\n      myChart: null,\n      // 地区坐标\n      selfAreaItems: {},\n      selfAreaData: new AreaData(),\n      selfOption: new EchartsOption()\n    };\n  },\n  mounted: function mounted() {\n    this.init();\n  },\n  methods: {\n    loadMap: function loadMap(mapName, data) {\n      if (data) {\n        console.log(mapName, data, \"mapName, datamapName, data\");\n        echarts.registerMap(mapName, data);\n      }\n    },\n    init: function init() {\n      // console.log(mapJson, \"mapJsonmapJson\");\n      this.selfAreaData = JSON.parse(JSON.stringify(this.areaData));\n      this.selfOption = JSON.parse(JSON.stringify(this.option));\n      this.selfColor = JSON.parse(JSON.stringify(this.colorList));\n      this.selfOption = JSON.parse(JSON.stringify(this.option));\n      this.myChart = echarts.init(this.$refs.myEchart);\n\n      if (this.cityConfig.dataJson) {\n        console.log(this.cityConfig);\n        this.loadMap(this.cityConfig.name, this.cityConfig.dataJson);\n      }\n\n      this.selfAreaItems = JSON.parse(JSON.stringify(this.areaItems));\n      window.onresize = this.myChart.resize;\n      this.myChart.setOption(this.selfOption); // 拖拽跟缩放重置\n\n      var throttledRenderEachCity = this.throttle(this.renderItems, 0);\n      this.myChart.on(\"geoRoam\", throttledRenderEachCity);\n      this.renderItems();\n      this.itemonClick();\n    },\n    // 缩放和拖拽\n    throttle: function throttle(fn, delay, debounce) {\n      var currCall;\n      var lastCall = 0;\n      var lastExec = 0;\n      var timer = null;\n      var diff;\n      var scope;\n      var args;\n      delay = delay || 0;\n\n      function exec() {\n        lastExec = new Date().getTime();\n        timer = null;\n        fn.apply(scope, args || []);\n      }\n\n      var cb = function cb() {\n        currCall = new Date().getTime();\n        scope = this;\n        args = arguments;\n        diff = currCall - (debounce ? lastCall : lastExec) - delay;\n        clearTimeout(timer);\n\n        if (debounce) {\n          timer = setTimeout(exec, delay);\n        } else {\n          if (diff >= 0) {\n            exec();\n          } else {\n            timer = setTimeout(exec, -diff);\n          }\n        }\n\n        lastCall = currCall;\n      };\n\n      return cb;\n    },\n    // 填充 地图点位\n    renderItems: function renderItems() {\n      var _this = this;\n\n      var option = Object.assign(this.selfOption, {\n        xAxis: [],\n        yAxis: [],\n        grid: [],\n        series: [],\n        tooltip: {\n          trigger: \"item\",\n          axisPointer: {\n            type: \"none\"\n          }\n        }\n      });\n      this.selfAreaData.forEach(function (item, idx) {\n        var nodeCoord = _this.selfAreaItems[item.areaName];\n\n        var coord = _this.myChart.convertToPixel(\"geo\", nodeCoord);\n\n        var titleItems = item.DateItems.map(function (i) {\n          return i.title;\n        });\n        var itemData = item.DateItems.map(function (i) {\n          return Number(i.value);\n        });\n        console.log(item, _this.selfAreaItems, coord);\n\n        if (coord) {\n          option.xAxis.push({\n            id: idx + item.areaName,\n            gridId: idx + item.areaName,\n            type: \"category\",\n            name: item.areaName,\n            nameLocation: \"middle\",\n            nameGap: 3,\n            splitLine: {\n              show: false\n            },\n            axisTick: {\n              show: false\n            },\n            axisLabel: {\n              show: false\n            },\n            axisLine: {\n              onZero: false,\n              lineStyle: {\n                color: \"#000000\"\n              }\n            },\n            data: titleItems,\n            z: 100\n          });\n          option.yAxis.push({\n            id: idx + item.areaName,\n            gridId: idx + item.areaName,\n            type: \"value\",\n            splitLine: {\n              show: false\n            },\n            axisTick: {\n              show: false\n            },\n            axisLabel: {\n              show: false\n            },\n            axisLine: {\n              show: false,\n              lineStyle: {\n                color: \"red\"\n              }\n            },\n            min: 0,\n            max: \"dataMax\"\n          });\n          option.grid.push({\n            id: idx + item.areaName,\n            width: 30,\n            height: 40,\n            left: coord[0] - 10,\n            top: coord[1] - 15,\n            z: 100\n          });\n          option.series.push({\n            id: idx + item.areaName,\n            type: \"bar\",\n            xAxisId: idx + item.areaName,\n            yAxisId: idx + item.areaName,\n            barGap: 0,\n            barCategoryGap: 0,\n            data: itemData,\n            z: 100,\n            itemStyle: {\n              normal: {\n                color: function color(params) {\n                  // build a color map as your need.\n                  var color = _this.selfColor[params.dataIndex];\n                  return color;\n                }\n              },\n              opacity: 0,\n              emphasis: {\n                label: {\n                  show: true\n                }\n              }\n            }\n          });\n        }\n      });\n      this.myChart.setOption(option);\n    },\n    // 点击显示柱状图\n    itemonClick: function itemonClick() {\n      var _this2 = this;\n\n      this.myChart.on(\"click\", function (e) {\n        if (e.componentSubType == \"bar\") {\n          _this2.barWrap = document.createElement(\"div\");\n          _this2.drawBar = document.createElement(\"div\");\n          _this2.wrap = document.getElementsByClassName(\"wrap\")[0]; // 先清除所有柱状图\n          // $(\".tongJiTu\").remove();\n          // 创建遮挡层\n\n          _this2.creatWrap(); // 创建柱状图容器\n\n\n          _this2.barWrap.id = \"bar-wrap\";\n          _this2.barWrap.className = \"bar-wrap\";\n          _this2.drawBar.className = \"zhuzhuang\";\n\n          var divX = _this2.getMousePos()[\"x\"];\n\n          var divY = _this2.getMousePos()[\"y\"];\n\n          _this2.barWrap.setAttribute(\"style\", \"width: 300px; height: 180px;position:absolute;top: \".concat(divY, \"px;left:\").concat(divX, \"px\"));\n\n          _this2.drawBar.setAttribute(\"style\", \"width: 100%; height: 100%\"); // 创建柱状图\n\n\n          _this2.wrap.appendChild(_this2.barWrap);\n\n          _this2.barWrap.appendChild(_this2.drawBar);\n\n          _this2.zhuZhuangTu(e); // // 点击遮挡层消失\n\n\n          _this2.clearWrap();\n        }\n\n        return;\n      });\n    },\n    // 获取横纵坐标\n    getMousePos: function getMousePos(e) {\n      e = event || window.event;\n      var x = e.clientX;\n      var y = e.clientY;\n      return {\n        x: x,\n        y: y\n      };\n    },\n    // 生成柱状图\n    zhuZhuangTu: function zhuZhuangTu(e) {\n      var index = e.seriesIndex;\n      var bar = echarts.init(this.drawBar);\n      var xTitle = this.selfAreaData[index].DateItems.map(function (i) {\n        return i.title;\n      });\n      var yValue = this.selfAreaData[index].DateItems.map(function (i) {\n        return i.value;\n      });\n      var option = {\n        backgroundColor: \"rgba(255,255,255,.3)\",\n        legend: {\n          data: xTitle\n        },\n        tooltip: {},\n        xAxis: [{\n          type: \"category\",\n          data: xTitle\n        }],\n        yAxis: [{\n          splitLine: {\n            show: false\n          },\n          type: \"value\"\n        }],\n        series: [{\n          type: \"bar\",\n          itemStyle: {\n            normal: {\n              color: function color(params) {\n                var colorList = [\"#F75D5D\", \"#59ED4F\", \"#4C91E7\"];\n                return colorList[params.dataIndex];\n              },\n              label: {\n                show: true,\n                position: \"top\",\n                textStyle: {\n                  color: \"#000\"\n                }\n              }\n            }\n          },\n          data: yValue\n        }]\n      };\n      bar.setOption(option);\n    },\n    // 生成遮挡层\n    creatWrap: function creatWrap() {\n      this.shaDe = document.createElement(\"div\");\n      this.shaDe.className = \"shaDe\";\n      this.wrap.appendChild(this.shaDe);\n    },\n    // 去掉遮挡层\n    clearWrap: function clearWrap() {\n      var _this3 = this;\n\n      this.shaDe.addEventListener(\"click\", function () {\n        _this3.shaDe.remove();\n\n        _this3.barWrap.remove();\n\n        _this3.drawBar.remove();\n\n        return false;\n      }, false);\n    }\n  }\n};",{"version":3,"sources":["chartFir.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n\t<div id=\"main\">\r\n\t\t<!-- <iframe src=\"price.html\" frameborder=\"0\" style=\"width: 97.8%;height: 99.9%;float: right;\"></iframe> -->\r\n\t\t\r\n\t\t<div class=\"echartDemo\">\r\n\t\t  <div class=\"wrap\">\r\n\t\t    <div id=\"map\" style=\"width: 100%; height: 800px;background-color: rgba(0,0,0,0.5);\">\r\n\t\t      <div :style=\"{ height: '800px', width: '100%' }\" ref=\"myEchart\"></div>\r\n\t\t    </div>\r\n\t\t  </div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script>\nimport echarts from \"echarts\";\nimport \"echarts/map/js/province/beijing\";\nimport AreaData from \"./data\";\nimport EchartsOption from \"./optionConfig\";\nexport default {\n  name: \"EchartsDemo\",\n  props: {\n    areaData: {\n      type: Array,\n      default() {\n        return new AreaData();\n      }\n    },\n    option: {\n      type: Object,\n      default() {\n        return new EchartsOption();\n      }\n    },\n    colorList: {\n      type: Array,\n      default() {\n        return [\"#F4E001\", \"#F0805A\", \"#26C0C0\"];\n      }\n    },\n    cityConfig: {\n      type: Object,\n      default() {\n        return {\n          name: \"北京市\",\n          dataJson: null\n        };\n      }\n    },\n    areaItems: {\n      type: Object,\n      default() {\n        return {\n          \"东城区\": [116.418757, 39.937544],\n          \"西城区\": [116.366794, 39.910309],\n          \"朝阳区\": [116.486409, 39.991489],\n          \"丰台区\": [116.286968, 39.863642],\n          \"石景山区\": [116.170445, 39.974601],\n          \"海淀区\": [116.280316, 40.039074],\n          \"门头沟区\": [115.905381, 40.009183],\n          \"房山区\": [115.701157, 39.735535],\n          \"通州区\": [116.758603, 39.802486],\n          \"顺义区\": [116.753525, 40.128936],\n          \"昌平区\": [116.235906, 40.318085],\n          \"大兴区\": [116.338033, 39.658908],\n          \"怀柔区\": [116.607122, 40.524272],\n          \"平谷区\": [117.112335, 40.244783],\n          \"密云区\": [116.943352, 40.477362],\n          \"延庆区\": [115.985006, 40.465325]\n        };\n      }\n    }\n  },\n  beforeDestroy() {\n    this.myChart.off(\"click\");\n  },\n  data() {\n    return {\n      wrap: null, //包裹框\n      drawBar: null, // 柱状图\n      barWrap: null,\n      shaDe: null, // 遮挡层\n      myChart: null,\n      // 地区坐标\n      selfAreaItems: {},\n      selfAreaData: new AreaData(),\n      selfOption: new EchartsOption()\n    };\n  },\n\n  mounted() {\n    this.init();\n  },\n  methods: {\n    loadMap(mapName, data) {\n      if (data) {\n        console.log(mapName, data, \"mapName, datamapName, data\");\n        echarts.registerMap(mapName, data);\n      }\n    },\n    init() {\n      // console.log(mapJson, \"mapJsonmapJson\");\n\n      this.selfAreaData = JSON.parse(JSON.stringify(this.areaData));\n      this.selfOption = JSON.parse(JSON.stringify(this.option));\n      this.selfColor = JSON.parse(JSON.stringify(this.colorList));\n      this.selfOption = JSON.parse(JSON.stringify(this.option));\n      this.myChart = echarts.init(this.$refs.myEchart);\n      if (this.cityConfig.dataJson) {\n        console.log(this.cityConfig);\n        this.loadMap(this.cityConfig.name, this.cityConfig.dataJson);\n      }\n      this.selfAreaItems = JSON.parse(JSON.stringify(this.areaItems));\n      window.onresize = this.myChart.resize;\n\n      this.myChart.setOption(this.selfOption);\n      // 拖拽跟缩放重置\n      let throttledRenderEachCity = this.throttle(this.renderItems, 0);\n      this.myChart.on(\"geoRoam\", throttledRenderEachCity);\n      this.renderItems();\n      this.itemonClick();\n    },\n    // 缩放和拖拽\n    throttle(fn, delay, debounce) {\n      let currCall;\n      let lastCall = 0;\n      let lastExec = 0;\n      let timer = null;\n      let diff;\n      let scope;\n      let args;\n      delay = delay || 0;\n      function exec() {\n        lastExec = new Date().getTime();\n        timer = null;\n        fn.apply(scope, args || []);\n      }\n\n      let cb = function() {\n        currCall = new Date().getTime();\n        scope = this;\n        args = arguments;\n        diff = currCall - (debounce ? lastCall : lastExec) - delay;\n\n        clearTimeout(timer);\n\n        if (debounce) {\n          timer = setTimeout(exec, delay);\n        } else {\n          if (diff >= 0) {\n            exec();\n          } else {\n            timer = setTimeout(exec, -diff);\n          }\n        }\n\n        lastCall = currCall;\n      };\n\n      return cb;\n    },\n    // 填充 地图点位\n    renderItems() {\n      let option = Object.assign(this.selfOption, {\n        xAxis: [],\n        yAxis: [],\n        grid: [],\n        series: [],\n        tooltip: {\n          trigger: \"item\",\n          axisPointer: {\n            type: \"none\"\n          }\n        }\n      });\n      this.selfAreaData.forEach((item, idx) => {\n        let nodeCoord = this.selfAreaItems[item.areaName];\n        let coord = this.myChart.convertToPixel(\"geo\", nodeCoord);\n        let titleItems = item.DateItems.map(i => i.title);\n        let itemData = item.DateItems.map(i => Number(i.value));\n        console.log(item, this.selfAreaItems, coord);\n        if (coord) {\n          option.xAxis.push({\n            id: idx + item.areaName,\n            gridId: idx + item.areaName,\n            type: \"category\",\n            name: item.areaName,\n            nameLocation: \"middle\",\n            nameGap: 3,\n            splitLine: {\n              show: false\n            },\n            axisTick: {\n              show: false\n            },\n            axisLabel: {\n              show: false\n            },\n            axisLine: {\n              onZero: false,\n              lineStyle: {\n                color: \"#000000\"\n              }\n            },\n            data: titleItems,\n            z: 100\n          });\n          option.yAxis.push({\n            id: idx + item.areaName,\n            gridId: idx + item.areaName,\n            type: \"value\",\n            splitLine: {\n              show: false\n            },\n            axisTick: {\n              show: false\n            },\n            axisLabel: {\n              show: false\n            },\n            axisLine: {\n              show: false,\n              lineStyle: {\n                color: \"red\"\n              }\n            },\n            min: 0,\n            max: \"dataMax\"\n          });\n          option.grid.push({\n            id: idx + item.areaName,\n            width: 30,\n            height: 40,\n            left: coord[0] - 10,\n            top: coord[1] - 15,\n            z: 100\n          });\n          option.series.push({\n            id: idx + item.areaName,\n            type: \"bar\",\n            xAxisId: idx + item.areaName,\n            yAxisId: idx + item.areaName,\n            barGap: 0,\n            barCategoryGap: 0,\n            data: itemData,\n            z: 100,\n            itemStyle: {\n              normal: {\n                color: params => {\n                  // build a color map as your need.\n                  let color = this.selfColor[params.dataIndex];\n                  return color;\n                }\n              },\n              opacity: 0,\n              emphasis: {\n                label: {\n                  show: true\n                }\n              }\n            }\n          });\n        }\n      });\n      this.myChart.setOption(option);\n    },\n    // 点击显示柱状图\n    itemonClick() {\n      this.myChart.on(\"click\", e => {\n        if (e.componentSubType == \"bar\") {\n          this.barWrap = document.createElement(\"div\");\n          this.drawBar = document.createElement(\"div\");\n          this.wrap = document.getElementsByClassName(\"wrap\")[0];\n          // 先清除所有柱状图\n          // $(\".tongJiTu\").remove();\n          // 创建遮挡层\n          this.creatWrap();\n          // 创建柱状图容器\n          this.barWrap.id = \"bar-wrap\";\n          this.barWrap.className = \"bar-wrap\";\n          this.drawBar.className = \"zhuzhuang\";\n          let divX = this.getMousePos()[\"x\"];\n          let divY = this.getMousePos()[\"y\"];\n          this.barWrap.setAttribute(\n            \"style\",\n            `width: 300px; height: 180px;position:absolute;top: ${divY}px;left:${divX}px`\n          );\n          this.drawBar.setAttribute(\"style\", `width: 100%; height: 100%`);\n          // 创建柱状图\n          this.wrap.appendChild(this.barWrap);\n          this.barWrap.appendChild(this.drawBar);\n          this.zhuZhuangTu(e);\n          // // 点击遮挡层消失\n          this.clearWrap();\n        }\n        return;\n      });\n    },\n    // 获取横纵坐标\n    getMousePos(e) {\n      e = event || window.event;\n      let x = e.clientX;\n      let y = e.clientY;\n      return { x, y };\n    },\n    // 生成柱状图\n    zhuZhuangTu(e) {\n      let index = e.seriesIndex;\n      let bar = echarts.init(this.drawBar);\n      let xTitle = this.selfAreaData[index].DateItems.map(i => i.title);\n      let yValue = this.selfAreaData[index].DateItems.map(i => i.value);\n      let option = {\n        backgroundColor: \"rgba(255,255,255,.3)\",\n        legend: {\n          data: xTitle\n        },\r\n\t\t\t\ttooltip:{},\n        xAxis: [\n          {\n            type: \"category\",\n            data: xTitle\n          }\n        ],\n        yAxis: [\n          {\n            splitLine: {\n              show: false\n            },\n            type: \"value\"\n          }\n        ],\n        series: [\n          {\n            type: \"bar\",\n            itemStyle: {\n              normal: {\n                color: function(params) {\n                  let colorList = [\"#F75D5D\", \"#59ED4F\", \"#4C91E7\"];\n                  return colorList[params.dataIndex];\n                },\n                label: {\n                  show: true,\n                  position: \"top\",\n                  textStyle: {\n                    color: \"#000\"\n                  }\n                }\n              }\n            },\n            data: yValue\n          }\n        ]\n      };\n      bar.setOption(option);\n    },\n    // 生成遮挡层\n    creatWrap() {\n      this.shaDe = document.createElement(\"div\");\n      this.shaDe.className = \"shaDe\";\n      this.wrap.appendChild(this.shaDe);\n    },\n    // 去掉遮挡层\n    clearWrap() {\n      this.shaDe.addEventListener(\n        \"click\",\n        () => {\n          this.shaDe.remove();\n          this.barWrap.remove();\n          this.drawBar.remove();\n          return false;\n        },\n        false\n      );\n    }\n  }\n};\n</script>\n\n<style lang=\"less\">\r\n\t#main {\r\n\t\t\twidth: 100%;\r\n\t\t\theight: 100%;\r\n\t\t}\n\t.shaDe {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\t// background-color: rgba(0, 0, 0, 0.2);\n\t}\n</style>\r\n\n"],"sourceRoot":"src\\views\\personalcenter\\component\\testVue"}]}