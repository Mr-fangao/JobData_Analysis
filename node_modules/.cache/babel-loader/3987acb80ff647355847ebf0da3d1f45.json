{"remainingRequest":"E:\\网络招聘大数据分析与可视化系统\\jobData_Analysis前端\\node_modules\\babel-loader\\lib\\index.js!E:\\网络招聘大数据分析与可视化系统\\jobData_Analysis前端\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\网络招聘大数据分析与可视化系统\\jobData_Analysis前端\\src\\map\\api\\4+\\GDrawSketch.js","dependencies":[{"path":"E:\\网络招聘大数据分析与可视化系统\\jobData_Analysis前端\\src\\map\\api\\4+\\GDrawSketch.js","mtime":1563098587000},{"path":"E:\\网络招聘大数据分析与可视化系统\\jobData_Analysis前端\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1580901136398},{"path":"E:\\网络招聘大数据分析与可视化系统\\jobData_Analysis前端\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\网络招聘大数据分析与可视化系统\\jobData_Analysis前端\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _slicedToArray from \"E:\\\\\\u7F51\\u7EDC\\u62DB\\u8058\\u5927\\u6570\\u636E\\u5206\\u6790\\u4E0E\\u53EF\\u89C6\\u5316\\u7CFB\\u7EDF\\\\jobData_Analysis\\u524D\\u7AEF\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/slicedToArray\";\nimport _classCallCheck from \"E:\\\\\\u7F51\\u7EDC\\u62DB\\u8058\\u5927\\u6570\\u636E\\u5206\\u6790\\u4E0E\\u53EF\\u89C6\\u5316\\u7CFB\\u7EDF\\\\jobData_Analysis\\u524D\\u7AEF\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/classCallCheck\";\nimport _createClass from \"E:\\\\\\u7F51\\u7EDC\\u62DB\\u8058\\u5927\\u6570\\u636E\\u5206\\u6790\\u4E0E\\u53EF\\u89C6\\u5316\\u7CFB\\u7EDF\\\\jobData_Analysis\\u524D\\u7AEF\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/createClass\";\nimport esriLoad from \"esri-loader\";\n\nvar GDrawSketch =\n/*#__PURE__*/\nfunction () {\n  function GDrawSketch(view) {\n    var _this = this;\n\n    _classCallCheck(this, GDrawSketch);\n\n    this.view = view;\n    this.finished = {};\n    return new Promise(function (resolve) {\n      esriLoad.loadModules([\"esri/widgets/Sketch/SketchViewModel\", \"esri/geometry/geometryEngine\"]).then(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            SketchViewModel = _ref2[0],\n            geometryEngine = _ref2[1];\n\n        _this.sketch = new SketchViewModel({\n          view: view,\n          pointSymbol: {\n            type: \"simple-marker\",\n            // autocasts as new SimpleMarkerSymbol()\n            style: \"circle\",\n            color: \"#8A2BE2\",\n            size: \"16px\"\n          },\n          polylineSymbol: {\n            type: \"simple-line\",\n            // autocasts as new SimpleMarkerSymbol()\n            color: \"#8A2BE2\",\n            width: \"2\",\n            style: \"solid\"\n          },\n          polygonSymbol: {\n            type: \"simple-fill\",\n            // autocasts as new SimpleMarkerSymbol()\n            color: \"rgba(138,43,226, 0.2)\",\n            style: \"solid\",\n            outline: {\n              // autocasts as new SimpleLineSymbol()\n              color: \"#8A2BE2\",\n              width: 2\n            }\n          }\n        }); // console.log(this.sketch);\n\n        _this.sketch.on(\"create-complete\", function (evt) {\n          view.graphics.add(evt.target.graphic);\n\n          if (_this.finished[\"create-complete\"]) {\n            _this.finished[\"create-complete\"]({\n              geometry: evt.geometry,\n              area: geometryEngine.planarArea(evt.geometry, \"square-meters\").toFixed(2)\n            });\n          }\n        });\n\n        _this.sketch.on(\"draw-complete\", function (evt) {\n          view.graphics.add(evt.graphic);\n\n          if (_this.finished[\"draw-complete\"]) {\n            _this.finished[\"draw-complete\"]({\n              geometry: evt.geometry,\n              area: geometryEngine.planarArea(evt.geometry, \"square-meters\").toFixed(2)\n            });\n          }\n        });\n\n        resolve(_this);\n      });\n    });\n  }\n\n  _createClass(GDrawSketch, [{\n    key: \"on\",\n    value: function on(name, event) {\n      this.finished[name] = event;\n    }\n  }, {\n    key: \"create\",\n    value: function create() {\n      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"polygon\";\n      this.view.isEdit = true;\n      this.view.graphics.removeAll();\n      this.sketch.create(type);\n    }\n  }]);\n\n  return GDrawSketch;\n}();\n\nexport { GDrawSketch as default };",{"version":3,"sources":["E:\\网络招聘大数据分析与可视化系统\\jobData_Analysis前端\\src\\map\\api\\4+\\GDrawSketch.js"],"names":["esriLoad","GDrawSketch","view","finished","Promise","loadModules","then","SketchViewModel","geometryEngine","sketch","pointSymbol","type","style","color","size","polylineSymbol","width","polygonSymbol","outline","on","graphics","add","evt","target","graphic","geometry","area","planarArea","toFixed","resolve","name","event","isEdit","removeAll","create"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,aAArB;;IACqBC,W;;;AACnB,uBAAYC,IAAZ,EAAkB;AAAA;;AAAA;;AAChB,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,WAAO,IAAIC,OAAJ,CAAY,mBAAW;AAC5BJ,eAASK,WAAT,CAAqB,CAAC,qCAAD,EAAwC,8BAAxC,CAArB,EAA8FC,IAA9F,CAAmG,gBAAuC;AAAA;AAAA,YAArCC,eAAqC;AAAA,YAApBC,cAAoB;;AACxI,cAAKC,MAAL,GAAc,IAAIF,eAAJ,CAAoB;AAChCL,gBAAMA,IAD0B;AAEhCQ,uBAAa;AACXC,kBAAM,eADK;AACY;AACvBC,mBAAO,QAFI;AAGXC,mBAAO,SAHI;AAIXC,kBAAM;AAJK,WAFmB;AAQhCC,0BAAgB;AACdJ,kBAAM,aADQ;AACO;AACrBE,mBAAO,SAFO;AAGdG,mBAAO,GAHO;AAIdJ,mBAAO;AAJO,WARgB;AAchCK,yBAAe;AACbN,kBAAM,aADO;AACQ;AACrBE,mBAAO,uBAFM;AAGbD,mBAAO,OAHM;AAIbM,qBAAS;AAAE;AACTL,qBAAO,SADA;AAEPG,qBAAO;AAFA;AAJI;AAdiB,SAApB,CAAd,CADwI,CAyBxI;;AACA,cAAKP,MAAL,CAAYU,EAAZ,CAAe,iBAAf,EAAkC,eAAO;AACvCjB,eAAKkB,QAAL,CAAcC,GAAd,CAAkBC,IAAIC,MAAJ,CAAWC,OAA7B;;AACA,cAAI,MAAKrB,QAAL,CAAc,iBAAd,CAAJ,EAAsC;AACpC,kBAAKA,QAAL,CAAc,iBAAd,EAAiC;AAC/BsB,wBAAUH,IAAIG,QADiB;AAE/BC,oBAAMlB,eAAemB,UAAf,CAA0BL,IAAIG,QAA9B,EAAwC,eAAxC,EAAyDG,OAAzD,CAAiE,CAAjE;AAFyB,aAAjC;AAID;AACF,SARD;;AASA,cAAKnB,MAAL,CAAYU,EAAZ,CAAe,eAAf,EAAgC,eAAO;AACrCjB,eAAKkB,QAAL,CAAcC,GAAd,CAAkBC,IAAIE,OAAtB;;AACA,cAAI,MAAKrB,QAAL,CAAc,eAAd,CAAJ,EAAoC;AAClC,kBAAKA,QAAL,CAAc,eAAd,EAA+B;AAC7BsB,wBAAUH,IAAIG,QADe;AAE7BC,oBAAMlB,eAAemB,UAAf,CAA0BL,IAAIG,QAA9B,EAAwC,eAAxC,EAAyDG,OAAzD,CAAiE,CAAjE;AAFuB,aAA/B;AAID;AACF,SARD;;AASAC,gBAAQ,KAAR;AACD,OA7CD;AA8CD,KA/CM,CAAP;AAgDD;;;;uBAEEC,I,EAAMC,K,EAAO;AACd,WAAK5B,QAAL,CAAc2B,IAAd,IAAsBC,KAAtB;AACD;;;6BAEwB;AAAA,UAAlBpB,IAAkB,uEAAX,SAAW;AACvB,WAAKT,IAAL,CAAU8B,MAAV,GAAmB,IAAnB;AACA,WAAK9B,IAAL,CAAUkB,QAAV,CAAmBa,SAAnB;AACA,WAAKxB,MAAL,CAAYyB,MAAZ,CAAmBvB,IAAnB;AACD;;;;;;SA9DkBV,W","sourcesContent":["import esriLoad from \"esri-loader\";\nexport default class GDrawSketch {\n  constructor(view) {\n    this.view = view;\n    this.finished = {};\n    return new Promise(resolve => {\n      esriLoad.loadModules([\"esri/widgets/Sketch/SketchViewModel\", \"esri/geometry/geometryEngine\"]).then(([SketchViewModel, geometryEngine]) => {\n        this.sketch = new SketchViewModel({\n          view: view,\n          pointSymbol: {\n            type: \"simple-marker\", // autocasts as new SimpleMarkerSymbol()\n            style: \"circle\",\n            color: \"#8A2BE2\",\n            size: \"16px\"\n          },\n          polylineSymbol: {\n            type: \"simple-line\", // autocasts as new SimpleMarkerSymbol()\n            color: \"#8A2BE2\",\n            width: \"2\",\n            style: \"solid\"\n          },\n          polygonSymbol: {\n            type: \"simple-fill\", // autocasts as new SimpleMarkerSymbol()\n            color: \"rgba(138,43,226, 0.2)\",\n            style: \"solid\",\n            outline: { // autocasts as new SimpleLineSymbol()\n              color: \"#8A2BE2\",\n              width: 2\n            }\n          }\n        });\n        // console.log(this.sketch);\n        this.sketch.on(\"create-complete\", evt => {\n          view.graphics.add(evt.target.graphic);\n          if (this.finished[\"create-complete\"]) {\n            this.finished[\"create-complete\"]({\n              geometry: evt.geometry,\n              area: geometryEngine.planarArea(evt.geometry, \"square-meters\").toFixed(2)\n            });\n          }\n        });\n        this.sketch.on(\"draw-complete\", evt => {  \n          view.graphics.add(evt.graphic);\n          if (this.finished[\"draw-complete\"]) {\n            this.finished[\"draw-complete\"]({\n              geometry: evt.geometry,\n              area: geometryEngine.planarArea(evt.geometry, \"square-meters\").toFixed(2)\n            });\n          }\n        })\n        resolve(this);\n      })\n    })\n  }\n\n  on(name, event) {\n    this.finished[name] = event;\n  }\n\n  create(type = \"polygon\") {\n    this.view.isEdit = true;\n    this.view.graphics.removeAll();\n    this.sketch.create(type);\n  }\n}\n"]}]}