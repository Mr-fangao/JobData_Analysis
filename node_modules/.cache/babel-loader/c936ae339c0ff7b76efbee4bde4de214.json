{"remainingRequest":"E:\\04 GIS相关比赛\\05 “创青春”比赛(省赛阶段)\\07 系统代码\\jobData_Analysis前端\\node_modules\\babel-loader\\lib\\index.js!E:\\04 GIS相关比赛\\05 “创青春”比赛(省赛阶段)\\07 系统代码\\jobData_Analysis前端\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\04 GIS相关比赛\\05 “创青春”比赛(省赛阶段)\\07 系统代码\\jobData_Analysis前端\\src\\map\\components\\measureLength.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\04 GIS相关比赛\\05 “创青春”比赛(省赛阶段)\\07 系统代码\\jobData_Analysis前端\\src\\map\\components\\measureLength.vue","mtime":1563098587000},{"path":"E:\\04 GIS相关比赛\\05 “创青春”比赛(省赛阶段)\\07 系统代码\\jobData_Analysis前端\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1580901136398},{"path":"E:\\04 GIS相关比赛\\05 “创青春”比赛(省赛阶段)\\07 系统代码\\jobData_Analysis前端\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\04 GIS相关比赛\\05 “创青春”比赛(省赛阶段)\\07 系统代码\\jobData_Analysis前端\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _slicedToArray from \"E:\\\\04 GIS\\u76F8\\u5173\\u6BD4\\u8D5B\\\\05 \\u201C\\u521B\\u9752\\u6625\\u201D\\u6BD4\\u8D5B(\\u7701\\u8D5B\\u9636\\u6BB5)\\\\07 \\u7CFB\\u7EDF\\u4EE3\\u7801\\\\jobData_Analysis\\u524D\\u7AEF\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/slicedToArray\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport esriLoader from \"esri-loader\";\nimport { MapAPI } from \"@/core/config/const\";\nexport default {\n  props: [\"view\"],\n  data: function data() {\n    return {};\n  },\n  mounted: function mounted() {\n    this.tools();\n  },\n  methods: {\n    tools: function tools() {\n      var _this2 = this;\n\n      esriLoader.loadScript({\n        url: MapAPI.js,\n        css: MapAPI.css\n      }).then(function (r) {\n        esriLoader.loadModules([\"esri/views/2d/draw/Draw\", \"esri/Graphic\", \"esri/geometry/Polyline\", \"esri/geometry/geometryEngine\", \"dojo/dom\", \"dojo/on\", \"dojo/domReady!\"]).then(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 6),\n              Draw = _ref2[0],\n              Graphic = _ref2[1],\n              polyline = _ref2[2],\n              geometryEngine = _ref2[3],\n              dom = _ref2[4],\n              on = _ref2[5];\n\n          var _this = _this2;\n          var activeWidget = null;\n\n          _this.view.ui.add(\"line-button\", \"top-left\"); //添加绘制面按钮，自定义UI\n\n\n          _this.view.when(function () {\n            var draw = new Draw({\n              view: _this2.view\n            }); //绑定线按钮绘制事件\n            //绑定面按钮绘制事件\n\n            var drawLineButton = document.getElementById(\"line-button\");\n\n            drawLineButton.onclick = function () {\n              _this.view.graphics.removeAll(); //清楚之前的绘制\n\n\n              enableCreateLine(draw, this.view);\n            };\n          }); //开始监听画线\n          //开始监听画面\n\n\n          function enableCreateLine(draw, view) {\n            var action = draw.create(\"polyline\", {\n              mode: \"click\"\n            }); // 获取焦点\n\n            _this.view.focus(); // 顶点添加事件\n\n\n            action.on(\"vertex-add\", createPolyline); //顶点移除事件\n\n            action.on(\"vertex-remove\", createPolyline); // 鼠标移动事件\n\n            action.on(\"cursor-update\", createPolyline); // 绘制完成事件\n\n            action.on(\"draw-complete\", createPolyline);\n          }\n\n          function createPolyline(event) {\n            //获取所有顶点\n            var vertices = event.vertices; //清除之前绘制\n\n            _this.view.graphics.removeAll();\n\n            var polyline = newPolyline(vertices);\n            var graphic = createGraphic(polyline);\n\n            _this.view.graphics.add(graphic);\n\n            var lineLength = geometryEngine.planarLength(polyline, \"meters\");\n\n            if (lineLength < 0) {\n              // simplify the polyline if needed and calculate the lineLength again\n              var simplifiedpolyline = geometryEngine.simplify(polyline);\n\n              if (simplifiedpolyline) {\n                lineLength = geometryEngine.planarLength(polyline, \"meters\");\n              }\n            } // var point = {\n            //   type: \"point\",\n            //   x: vertices[vertices.length - 1][0],\n            //   y: vertices[vertices.length - 1][1]\n            // };\n            // start displaying the lineLength of the polyline\n\n\n            labellineLengths(polyline, lineLength);\n          }\n\n          function newPolyline(vertices) {\n            return new polyline({\n              hasZ: false,\n              hasM: false,\n              paths: vertices,\n              spatialReference: _this.view.spatialReference\n            });\n          }\n\n          function createGraphic(polyline) {\n            var graphic = new Graphic({\n              geometry: polyline,\n              symbol: {\n                type: \"simple-line\",\n                // autocasts as new SimpleFillSymbol\n                color: \"red\",\n                width: 1.5,\n                style: \"dash\",\n                cap: \"round\"\n              }\n            });\n            return graphic;\n          }\n\n          function labellineLengths(polyline, lineLength) {\n            var graphic = new Graphic({\n              geometry: polyline.extent.center,\n              symbol: {\n                type: \"text\",\n                color: \"black\",\n                haloColor: \"black\",\n                haloSize: \"1px\",\n                text: lineLength.toFixed(2) + \" 米\",\n                xoffset: 6,\n                yoffset: 6,\n                font: {\n                  // autocast as Font\n                  size: 15,\n                  family: \"sans-serif\"\n                }\n              }\n            });\n\n            _this.view.graphics.add(graphic);\n          }\n        });\n      });\n    }\n  }\n};",{"version":3,"sources":["measureLength.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    \n    <div id=\"line-button\" class=\"esri-widget esri-widget--button esri-interactive\" title=\"测量长度\">\n        <span class=\"esri-icon-polyline\"></span>\n    </div>\n  </div>\n</template>\n\n<script>\nimport esriLoader from \"esri-loader\";\nimport { MapAPI } from \"@/core/config/const\";\n\nexport default {\n  props: [\"view\"],\n  data() {\n    return {};\n  },\n  mounted() {\n    this.tools();\n\n  },\n  methods: {\n    tools() {\n      esriLoader\n        .loadScript({\n          url: MapAPI.js,\n          css: MapAPI.css\n        })\n        .then(r => {\n          esriLoader\n            .loadModules([\n              \"esri/views/2d/draw/Draw\",\n              \"esri/Graphic\",\n              \"esri/geometry/Polyline\",\n              \"esri/geometry/geometryEngine\",\n              \"dojo/dom\",\n              \"dojo/on\",\n              \"dojo/domReady!\"\n            ])\n            .then(([Draw, Graphic, polyline, geometryEngine, dom, on]) => {\n              var _this = this;\n              var activeWidget = null;\n              _this.view.ui.add(\"line-button\", \"top-left\"); //添加绘制面按钮，自定义UI\n              _this.view.when(() => {\n                var draw = new Draw({\n                  view: this.view\n                });\n                //绑定线按钮绘制事件\n\n                //绑定面按钮绘制事件\n                var drawLineButton = document.getElementById(\"line-button\");\n                drawLineButton.onclick = function() {\n                  _this.view.graphics.removeAll(); //清楚之前的绘制\n                  enableCreateLine(draw, this.view);\n                };\n              });\n              //开始监听画线\n\n              //开始监听画面\n              function enableCreateLine(draw, view) {\n                var action = draw.create(\"polyline\", {\n                  mode: \"click\"\n                });\n                // 获取焦点\n                _this.view.focus();\n\n                // 顶点添加事件\n                action.on(\"vertex-add\", createPolyline);\n\n                //顶点移除事件\n                action.on(\"vertex-remove\", createPolyline);\n\n                // 鼠标移动事件\n                action.on(\"cursor-update\", createPolyline);\n\n                // 绘制完成事件\n                action.on(\"draw-complete\", createPolyline);\n              }\n\n              function createPolyline(event) {\n                //获取所有顶点\n                var vertices = event.vertices;\n                //清除之前绘制\n                _this.view.graphics.removeAll();\n                var polyline = newPolyline(vertices);\n                var graphic = createGraphic(polyline);\n                _this.view.graphics.add(graphic);\n     \n\n                var lineLength = geometryEngine.planarLength(\n                  polyline,\n                  \"meters\"\n                );\n\n                if (lineLength < 0) {\n                  // simplify the polyline if needed and calculate the lineLength again\n                  var simplifiedpolyline = geometryEngine.simplify(polyline);\n                  if (simplifiedpolyline) {\n                    lineLength = geometryEngine.planarLength(\n                      polyline,\n                      \"meters\"\n                    );\n                  }\n                }\n                // var point = {\n                //   type: \"point\",\n                //   x: vertices[vertices.length - 1][0],\n                //   y: vertices[vertices.length - 1][1]\n                // };\n                // start displaying the lineLength of the polyline\n                labellineLengths(polyline, lineLength);\n              }\n              function newPolyline(vertices) {\n                return new polyline({\n                  hasZ: false,\n                  hasM: false,\n                  paths: vertices,\n                  spatialReference: _this.view.spatialReference\n                });\n              }\n\n              function createGraphic(polyline) {\n                var graphic = new Graphic({\n                  geometry: polyline,\n                  symbol: {\n                    type: \"simple-line\", // autocasts as new SimpleFillSymbol\n                    color: \"red\",\n                    width: 1.5,\n                    style: \"dash\",\n                    cap: \"round\"\n                  }\n                });\n                return graphic;\n              }\n\n              function labellineLengths(polyline, lineLength) {\n         \n                var graphic = new Graphic({\n                  geometry: polyline.extent.center,\n                  symbol: {\n                    type: \"text\",\n                    color: \"black\",\n                    haloColor: \"black\",\n                    haloSize: \"1px\",\n                    text: lineLength.toFixed(2) + \" 米\",\n                    xoffset: 6,\n                    yoffset: 6,\n                    font: {\n                      // autocast as Font\n                      size: 15,\n                      family: \"sans-serif\"\n                    }\n                  }\n                });\n                _this.view.graphics.add(graphic);\n              }\n            });\n        });\n    }\n  }\n};\n</script>\n\n<style lang=\"less\" >\n</style>\n"],"sourceRoot":"src\\map\\components"}]}