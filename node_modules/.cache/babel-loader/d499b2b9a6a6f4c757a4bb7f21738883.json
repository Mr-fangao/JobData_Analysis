{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\网络招聘大数据分析与就业推荐系统\\备份\\jobData_Analysis\\jobData_Analysis前端\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Administrator\\Desktop\\网络招聘大数据分析与就业推荐系统\\备份\\jobData_Analysis\\jobData_Analysis前端\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\网络招聘大数据分析与就业推荐系统\\备份\\jobData_Analysis\\jobData_Analysis前端\\src\\map\\components\\measureArea.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\网络招聘大数据分析与就业推荐系统\\备份\\jobData_Analysis\\jobData_Analysis前端\\src\\map\\components\\measureArea.vue","mtime":1563098587000},{"path":"C:\\Users\\Administrator\\Desktop\\网络招聘大数据分析与就业推荐系统\\备份\\jobData_Analysis\\jobData_Analysis前端\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1580901136398},{"path":"C:\\Users\\Administrator\\Desktop\\网络招聘大数据分析与就业推荐系统\\备份\\jobData_Analysis\\jobData_Analysis前端\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\网络招聘大数据分析与就业推荐系统\\备份\\jobData_Analysis\\jobData_Analysis前端\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _slicedToArray from \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\\\u7F51\\u7EDC\\u62DB\\u8058\\u5927\\u6570\\u636E\\u5206\\u6790\\u4E0E\\u5C31\\u4E1A\\u63A8\\u8350\\u7CFB\\u7EDF\\\\\\u5907\\u4EFD\\\\jobData_Analysis\\\\jobData_Analysis\\u524D\\u7AEF\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/slicedToArray\";\n//\n//\n//\n//\n//\n//\n//\n//\nimport esriLoader from \"esri-loader\";\nimport { MapAPI } from \"@/core/config/const\";\nexport default {\n  props: [\"view\"],\n  data: function data() {\n    return {};\n  },\n  mounted: function mounted() {\n    this.tools();\n  },\n  methods: {\n    tools: function tools() {\n      var _this2 = this;\n\n      esriLoader.loadScript({\n        url: MapAPI.js,\n        css: MapAPI.css\n      }).then(function (r) {\n        esriLoader.loadModules([\"esri/views/2d/draw/Draw\", \"esri/Graphic\", \"esri/geometry/Polygon\", \"esri/geometry/geometryEngine\", \"dojo/dom\", \"dojo/on\", \"dojo/domReady!\"]).then(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 6),\n              Draw = _ref2[0],\n              Graphic = _ref2[1],\n              Polygon = _ref2[2],\n              geometryEngine = _ref2[3],\n              dom = _ref2[4],\n              on = _ref2[5];\n\n          var _this = _this2;\n          var activeWidget = null;\n\n          _this.view.ui.add(\"area-button\", \"top-left\"); //添加绘制面按钮，自定义UI\n\n\n          _this.view.when(function () {\n            var draw = new Draw({\n              view: _this2.view\n            }); //绑定线按钮绘制事件\n            //绑定面按钮绘制事件\n\n            var drawAreaButton = document.getElementById(\"area-button\");\n\n            drawAreaButton.onclick = function () {\n              _this.view.graphics.removeAll(); //清楚之前的绘制\n\n\n              enableCreateArea(draw, _this2.view);\n            };\n          }); //开始监听画线\n          //开始监听画面\n\n\n          function enableCreateArea(draw, view) {\n            var action = draw.create(\"polygon\", {\n              mode: \"click\" //点击方式加点\n\n            }); // 获取焦点\n\n            view.focus(); // 顶点添加事件\n\n            action.on(\"vertex-add\", createPolygon); //顶点移除事件\n\n            action.on(\"vertex-remove\", createPolygon); // 鼠标移动事件\n\n            action.on(\"cursor-update\", createPolygon); // 绘制完成事件\n\n            action.on(\"draw-complete\", createPolygon);\n          }\n\n          function createPolygon(event) {\n            //获取所有顶点\n            var vertices = event.vertices; //清除之前绘制\n\n            _this.view.graphics.removeAll();\n\n            var polygon = newPolygon(vertices);\n            var graphic = createGraphic(polygon);\n\n            _this.view.graphics.add(graphic);\n\n            var area = geometryEngine.planarArea(polygon, \"square-kilometers\");\n\n            if (area < 0) {\n              // simplify the polygon if needed and calculate the area again\n              var simplifiedPolygon = geometryEngine.simplify(polygon);\n\n              if (simplifiedPolygon) {\n                area = geometryEngine.planarArea(simplifiedPolygon, \"square-kilometers\");\n              }\n            } // start displaying the area of the polygon\n\n\n            labelAreas(polygon, area);\n          }\n\n          function newPolygon(vertices) {\n            return new Polygon({\n              rings: vertices,\n              spatialReference: _this.view.spatialReference\n            });\n          }\n\n          function createGraphic(polygon) {\n            var graphic = new Graphic({\n              geometry: polygon,\n              symbol: {\n                type: \"simple-fill\",\n                // autocasts as SimpleFillSymbol\n                color: [102, 0, 255, 0.15],\n                outline: {\n                  // autocasts as SimpleLineSymbol\n                  color: \"red\",\n                  style: \"dash\",\n                  width: 1\n                }\n              }\n            });\n            return graphic;\n          }\n\n          function labelAreas(geom, area) {\n            var graphic = new Graphic({\n              geometry: geom.centroid,\n              symbol: {\n                type: \"text\",\n                color: \"white\",\n                haloColor: \"black\",\n                haloSize: \"1px\",\n                text: area.toFixed(2) + \" 平方公里\",\n                xoffset: 3,\n                yoffset: 3,\n                font: {\n                  // autocast as Font\n                  size: 14,\n                  family: \"sans-serif\"\n                }\n              }\n            });\n\n            _this.view.graphics.add(graphic);\n          }\n        });\n      });\n    }\n  }\n};",{"version":3,"sources":["measureArea.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <div id=\"area-button\" class=\"esri-widget esri-widget--button esri-interactive\" title=\"测量面积\">\n        <span class=\"esri-icon-polygon\"></span>\n    </div>\n  </div>\n</template>\n\n<script>\nimport esriLoader from \"esri-loader\";\nimport { MapAPI } from \"@/core/config/const\";\n\nexport default {\n  props: [\"view\"],\n  data() {\n    return {};\n  },\n  mounted() {\n    this.tools();\n\n  },\n  methods: {\n    tools() {\n      esriLoader\n        .loadScript({\n          url: MapAPI.js,\n          css: MapAPI.css\n        })\n        .then(r => {\n          esriLoader\n            .loadModules([\n              \"esri/views/2d/draw/Draw\",\n              \"esri/Graphic\",\n              \"esri/geometry/Polygon\",\n              \"esri/geometry/geometryEngine\",\n              \"dojo/dom\",\n              \"dojo/on\",\n              \"dojo/domReady!\"\n            ])\n            .then(([Draw, Graphic, Polygon, geometryEngine, dom, on]) => {\n              var _this = this;\n              var activeWidget = null;\n              _this.view.ui.add(\"area-button\", \"top-left\"); //添加绘制面按钮，自定义UI\n              _this.view.when(() => {\n                var draw = new Draw({\n                  view: this.view\n                });\n                //绑定线按钮绘制事件\n\n                //绑定面按钮绘制事件\n                var drawAreaButton = document.getElementById(\"area-button\");\n                drawAreaButton.onclick = () => {\n             \n                  _this.view.graphics.removeAll(); //清楚之前的绘制\n                  enableCreateArea(draw, this.view);\n                };\n              });\n              //开始监听画线\n\n              //开始监听画面\n              function enableCreateArea(draw, view) {\n                var action = draw.create(\"polygon\", {\n                  mode: \"click\" //点击方式加点\n                });\n                // 获取焦点\n                view.focus();\n\n                // 顶点添加事件\n                action.on(\"vertex-add\", createPolygon);\n\n                //顶点移除事件\n                action.on(\"vertex-remove\", createPolygon);\n\n                // 鼠标移动事件\n                action.on(\"cursor-update\", createPolygon);\n\n                // 绘制完成事件\n                action.on(\"draw-complete\", createPolygon);\n              }\n\n              function createPolygon(event) {\n                //获取所有顶点\n                var vertices = event.vertices;\n                //清除之前绘制\n                _this.view.graphics.removeAll();\n                var polygon = newPolygon(vertices);\n                var graphic = createGraphic(polygon);\n                _this.view.graphics.add(graphic);\n                var area = geometryEngine.planarArea(\n                  polygon,\n                  \"square-kilometers\"\n                );\n                if (area < 0) {\n                  // simplify the polygon if needed and calculate the area again\n                  var simplifiedPolygon = geometryEngine.simplify(polygon);\n                  if (simplifiedPolygon) {\n                    area = geometryEngine.planarArea(\n                      simplifiedPolygon,\n                      \"square-kilometers\"\n                    );\n                  }\n                }\n                // start displaying the area of the polygon\n                labelAreas(polygon, area);\n              }\n              function newPolygon(vertices) {\n                return new Polygon({\n                  rings: vertices,\n                  spatialReference: _this.view.spatialReference\n                });\n              }\n\n              function createGraphic(polygon) {\n                var graphic = new Graphic({\n                  geometry: polygon,\n                  symbol: {\n                    type: \"simple-fill\", // autocasts as SimpleFillSymbol\n                    color: [102, 0, 255, 0.15],\n                    outline: {\n                      // autocasts as SimpleLineSymbol\n                      color: \"red\",\n                      style: \"dash\",\n                      width: 1\n                    }\n                  }\n                });\n                return graphic;\n              }\n\n              function labelAreas(geom, area) {\n                var graphic = new Graphic({\n                  geometry: geom.centroid,\n                  symbol: {\n                    type: \"text\",\n                    color: \"white\",\n                    haloColor: \"black\",\n                    haloSize: \"1px\",\n                    text: area.toFixed(2) + \" 平方公里\",\n                    xoffset: 3,\n                    yoffset: 3,\n                    font: {\n                      // autocast as Font\n                      size: 14,\n                      family: \"sans-serif\"\n                    }\n                  }\n                });\n                _this.view.graphics.add(graphic);\n              }\n            });\n        });\n    }\n  }\n};\n</script>\n\n<style lang=\"less\" >\n</style>\n"],"sourceRoot":"src\\map\\components"}]}