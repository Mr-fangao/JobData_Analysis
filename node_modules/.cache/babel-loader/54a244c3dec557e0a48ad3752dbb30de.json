{"remainingRequest":"C:\\Users\\asus\\Desktop\\GIS相关比赛\\01 GIS省赛(中期检查+收尾)\\04 系统运行代码\\Code\\前端\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\asus\\Desktop\\GIS相关比赛\\01 GIS省赛(中期检查+收尾)\\04 系统运行代码\\Code\\前端\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\asus\\Desktop\\GIS相关比赛\\01 GIS省赛(中期检查+收尾)\\04 系统运行代码\\Code\\前端\\src\\views\\infoSearch\\inforCount\\public.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\asus\\Desktop\\GIS相关比赛\\01 GIS省赛(中期检查+收尾)\\04 系统运行代码\\Code\\前端\\src\\views\\infoSearch\\inforCount\\public.vue","mtime":1588488291467},{"path":"C:\\Users\\asus\\Desktop\\GIS相关比赛\\01 GIS省赛(中期检查+收尾)\\04 系统运行代码\\Code\\前端\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1580901136398},{"path":"C:\\Users\\asus\\Desktop\\GIS相关比赛\\01 GIS省赛(中期检查+收尾)\\04 系统运行代码\\Code\\前端\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\asus\\Desktop\\GIS相关比赛\\01 GIS省赛(中期检查+收尾)\\04 系统运行代码\\Code\\前端\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Server from \"@/core/server\";\nimport { services } from \"@/core/config/services\";\nimport GDrawSketch from \"@/map/api/4+/GDrawSketch\";\nimport GDrawbuffer from \"@/map/api/4+/GDrawBuffer\";\nimport GConvertGeometry from \"@/map/api/js/convert/GConvertGeometry\";\n\nvar echarts = require(\"echarts\");\n\nexport default {\n  created: function created() {\n    var _this2 = this;\n\n    this.$root.Bus.$on(\"eventSelectHouse\", function () {\n      _this2.dialog1 = true;\n    });\n  },\n  data: function data() {\n    return {\n      dialog1: false,\n      autoshape: \"\",\n      PublicFacility: false,\n      PublicFacility2: false,\n      streetList: [{\n        value: \"北京\",\n        label: \"北京\"\n      }, {\n        value: \"上海\",\n        label: \"上海\"\n      }, {\n        value: \"广州\",\n        label: \"广州\"\n      }, {\n        value: \"深圳\",\n        label: \"深圳\"\n      }, {\n        value: \"南京\",\n        label: \"南京\"\n      }, {\n        value: \"武汉\",\n        label: \"武汉\"\n      }, {\n        value: \"杭州\",\n        label: \"杭州\"\n      }, {\n        value: \"长沙\",\n        label: \"长沙\" // {\n        //   value: \"施集镇\",\n        //   label: \"施集镇\"\n        // },\n        // {\n        //   value: \"凤凰街\",\n        //   label: \"凤凰街\"\n        // },\n        // {\n        //   value: \"清流街\",\n        //   label: \"清流街\"\n        // },\n        // {\n        //   value: \"琅琊街\",\n        //   label: \"琅琊街\"\n        // },\n        // {\n        //   value: \"北门街\",\n        //   label: \"北门街\"\n        // },\n        // {\n        //   value: \"南门街\",\n        //   label: \"南门街\"\n        // },\n        // {\n        //   value: \"西门街\",\n        //   label: \"西门街\"\n        // }\n        // {\n        //   value: \"东门街\",\n        //   label: \"东门街\"\n        // },\n        // {\n        //   value: \"西涧街\",\n        //   label: \"西涧街\"\n        // },\n        // {\n        //   value: \"乌衣镇\",\n        //   label: \"乌衣镇\"\n        // },\n        // {\n        //   value: \"龙蟠街道\",\n        //   label: \"龙蟠街道\"\n        // }\n\n      }],\n      columns1: [{\n        title: \"统计目标\",\n        key: \"name\",\n        align: \"center\"\n      }, {\n        title: \"统计结果\",\n        key: \"number\",\n        align: \"center\"\n      }],\n      data1: [{\n        key: \"medical\",\n        name: \"行政区划\",\n        number: \"北京\"\n      }, {\n        key: \"school\",\n        name: \"岗位发布数量\",\n        number: \"1000\"\n      }, {\n        key: \"govermentAgencies\",\n        name: \"薪资平均水平\",\n        number: \"7000元/月\"\n      }, {\n        key: \"telecomHouse\",\n        name: \"本科以下占比\",\n        number: \"15%\"\n      }, {\n        key: \"ticket\",\n        name: \"本科占比\",\n        number: \"55%\"\n      }, {\n        key: \"publicFacilities\",\n        name: \"硕士占比\",\n        number: \"25%\"\n      }, {\n        key: \"station\",\n        name: \"博士及以上占比\",\n        number: \"5%\"\n      }],\n      Street: \"\",\n      myChart: null,\n      automyChart: null\n    };\n  },\n  methods: {\n    createPolygon: function createPolygon() {\n      var _this3 = this;\n\n      new GDrawSketch(window.mapview).then(function (gDraw) {\n        _this3.gDraw = gDraw;\n\n        _this3.gDraw.create(\"polygon\");\n\n        _this3.gDraw.on(\"create-complete\", function (e) {\n          var shape = mapApi.convert.toWKTByGeometry.ToWKT(e.geometry);\n          _this3.autoshape = shape;\n          parent.onemap.pubsub.publish(\"drawPolygon\", shape);\n        });\n      });\n    },\n    autoPolygon: function autoPolygon() {\n      this.PublicFacility2 = true;\n\n      if (!this.automyChart) {\n        this.automyChart = echarts.init(document.getElementById(\"charts\"));\n      }\n\n      var _this = this;\n\n      Server.post({\n        url: services.autoStreet,\n        params: {\n          polygon: this.autoshape\n        }\n      }).then(function (res) {\n        if (res.status === 1) {\n          var xData = [];\n          var yDate = [];\n\n          _this.data1.forEach(function (element) {\n            element.number = res.data[0][element.key]; //对应返回data数据对应的key值\n\n            xData.push(element.name);\n            yDate.push(res.data[0][element.key]);\n          });\n\n          _this.automyChart.setOption({\n            color: [\"#19be6b\"],\n            tooltip: {\n              trigger: \"axis\",\n              axisPointer: {\n                type: \"shadow\"\n              }\n            },\n            grid: {\n              left: \"3%\",\n              right: \"4%\",\n              bottom: \"3%\",\n              containLabel: true\n            },\n            xAxis: [{\n              type: \"category\",\n              data: xData,\n              axisTick: {\n                alignWithLabel: true\n              },\n              axisLabel: {\n                interval: 0\n              },\n              axisLine: {\n                show: true,\n                lineStyle: {\n                  type: \"dotted\",\n                  color: \"#696969\"\n                }\n              }\n            }],\n            yAxis: [{\n              type: \"value\"\n            }],\n            series: [{\n              name: \"数量\",\n              type: \"bar\",\n              barWidth: \"40%\",\n              data: yDate,\n              label: {\n                normal: {\n                  show: true,\n                  position: \"top\"\n                }\n              }\n            }]\n          });\n        } else {\n          this.$Message.error(rsp.message);\n        }\n      });\n    },\n    getStreet: function getStreet() {\n      this.PublicFacility2 = true;\n\n      if (!this.myChart) {\n        this.myChart = echarts.init(document.getElementById(\"charts\"));\n      }\n\n      var _this = this;\n\n      Server.get({\n        url: services.streetquery,\n        params: {\n          name: _this.Street\n        }\n      }).then(function (res) {\n        var xData = [];\n        var yDate = [];\n\n        _this.data1.forEach(function (element) {\n          element.number = res.data[0][element.key]; //对应返回data数据对应的key值\n\n          xData.push(element.name);\n          yDate.push(res.data[0][element.key]);\n        });\n\n        _this.myChart.setOption({\n          color: [\"#19be6b\"],\n          tooltip: {\n            trigger: \"axis\",\n            axisPointer: {\n              type: \"shadow\"\n            }\n          },\n          grid: {\n            left: \"3%\",\n            right: \"4%\",\n            bottom: \"3%\",\n            containLabel: true\n          },\n          xAxis: [{\n            type: \"category\",\n            data: xData,\n            axisTick: {\n              alignWithLabel: true\n            },\n            axisLabel: {\n              interval: 0\n            },\n            axisLine: {\n              show: true,\n              lineStyle: {\n                type: \"dotted\",\n                color: \"#696969\"\n              }\n            }\n          }],\n          yAxis: [{\n            type: \"value\"\n          }],\n          series: [{\n            name: \"数量\",\n            type: \"bar\",\n            barWidth: \"40%\",\n            data: yDate,\n            label: {\n              normal: {\n                show: true,\n                position: \"top\"\n              }\n            }\n          }]\n        });\n      });\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.$root.Bus.$off(\"eventSelectHouse\");\n  }\n};",{"version":3,"sources":["public.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <div>\r\n    <Modal v-model=\"dialog1\" footer-hide :mask-closable=\"false\" width=\"380\" draggable>\r\n      <p slot=\"header\" style=\"color:#19be6b;text-align:left\">\r\n      <Icon type=\"ios-stats\"  color=\"#19be6b\" size=\"23\"/>\r\n      <span>多边形查询</span>\r\n      </p>\r\n      <Tabs size=\"small\">\r\n        <TabPane label=\"选择城市\"> \r\n            <Form :label-width=\"75\">\r\n              <FormItem label=\"城市名称：\" prop=\"zoning\">\r\n                <Select  v-model=\"Street\" placeholder=\"选择查看的城市\">\r\n                  <Option v-for=\"item in streetList\" :key=\"item.value\" :value=\"item.value\">{{item.label}}</Option>\r\n                </Select> \r\n              </FormItem>\r\n              <FormItem style=\"text-align:right\">\r\n                  <Button type=\"primary\" @click=\"getStreet\">查询</Button>\r\n              </FormItem>\r\n            </Form>\r\n        </TabPane>\r\n        <TabPane label=\"自定义查询\">\r\n            <Form>\r\n              <FormItem label=\"自定义查询：\" prop=\"zoning\">\r\n                <Button shape=\"circle\" title=\"自定义范围\" @click=\"createPolygon\">\r\n                  <span class=\"icon-polygon\" ></span>\r\n                </Button>\r\n              </FormItem>   \r\n                <FormItem style=\"text-align:right\">\r\n                    <Button type=\"primary\" @click=\"autoPolygon\">查询</Button>\r\n                </FormItem>\r\n            </Form>\r\n        </TabPane>\r\n      </Tabs>\r\n      </Modal>\r\n      <Modal v-model=\"PublicFacility2\" draggable scrollable :styles=\"{top: '50px', textAlign:'center'}\" title=\"数据统计\" width=\"600\">\r\n        <Table  size=\"small\" stripe :columns=\"columns1\" :data=\"data1\"></Table>\r\n        <div id=\"charts\" style=\"width:600px;height:220px;\"></div>\r\n      </Modal> \r\n    </div>\r\n </template>\r\n <script>\r\nimport Server from \"@/core/server\";\r\nimport { services } from \"@/core/config/services\";\r\nimport GDrawSketch from \"@/map/api/4+/GDrawSketch\";\r\nimport GDrawbuffer from \"@/map/api/4+/GDrawBuffer\";\r\nimport GConvertGeometry from \"@/map/api/js/convert/GConvertGeometry\";\r\nvar echarts = require(\"echarts\");\r\nexport default {\r\n  created() {\r\n    this.$root.Bus.$on(\"eventSelectHouse\", () => {\r\n      this.dialog1 = true;\r\n    });\r\n  },\r\n  data() {\r\n    return {\r\n      dialog1: false,\r\n      autoshape: \"\",\r\n      PublicFacility: false,\r\n      PublicFacility2: false,\r\n      streetList: [\r\n        {\r\n          value: \"北京\",\r\n          label: \"北京\"\r\n        },\r\n        {\r\n          value: \"上海\",\r\n          label: \"上海\"\r\n        },\r\n        {\r\n          value: \"广州\",\r\n          label: \"广州\"\r\n        },\r\n        {\r\n          value: \"深圳\",\r\n          label: \"深圳\"\r\n        },\r\n        {\r\n          value: \"南京\",\r\n          label: \"南京\"\r\n        },\r\n        {\r\n          value: \"武汉\",\r\n          label: \"武汉\"\r\n        },\r\n        {\r\n          value: \"杭州\",\r\n          label: \"杭州\"\r\n        },\r\n        {\r\n          value: \"长沙\",\r\n          label: \"长沙\"\r\n        }\r\n        // {\r\n        //   value: \"施集镇\",\r\n        //   label: \"施集镇\"\r\n        // },\r\n        // {\r\n        //   value: \"凤凰街\",\r\n        //   label: \"凤凰街\"\r\n        // },\r\n        // {\r\n        //   value: \"清流街\",\r\n        //   label: \"清流街\"\r\n        // },\r\n        // {\r\n        //   value: \"琅琊街\",\r\n        //   label: \"琅琊街\"\r\n        // },\r\n        // {\r\n        //   value: \"北门街\",\r\n        //   label: \"北门街\"\r\n        // },\r\n        // {\r\n        //   value: \"南门街\",\r\n        //   label: \"南门街\"\r\n        // },\r\n        // {\r\n        //   value: \"西门街\",\r\n        //   label: \"西门街\"\r\n        // }\r\n        // {\r\n        //   value: \"东门街\",\r\n        //   label: \"东门街\"\r\n        // },\r\n        // {\r\n        //   value: \"西涧街\",\r\n        //   label: \"西涧街\"\r\n        // },\r\n        // {\r\n        //   value: \"乌衣镇\",\r\n        //   label: \"乌衣镇\"\r\n        // },\r\n        // {\r\n        //   value: \"龙蟠街道\",\r\n        //   label: \"龙蟠街道\"\r\n        // }\r\n      ],\r\n      columns1: [\r\n        {\r\n          title: \"统计目标\",\r\n          key: \"name\",\r\n          align: \"center\"\r\n        },\r\n        {\r\n          title: \"统计结果\",\r\n          key: \"number\",\r\n          align: \"center\"\r\n        }\r\n      ],\r\n      data1: [\r\n        {\r\n          key: \"medical\",\r\n          name: \"行政区划\",\r\n          number: \"北京\"\r\n        },\r\n        {\r\n          key: \"school\",\r\n          name: \"岗位发布数量\",\r\n          number: \"1000\"\r\n        },\r\n        {\r\n          key: \"govermentAgencies\",\r\n          name: \"薪资平均水平\",\r\n          number: \"7000元/月\"\r\n        },\r\n        {\r\n          key: \"telecomHouse\",\r\n          name: \"本科以下占比\",\r\n          number: \"15%\"\r\n        },\r\n        {\r\n          key: \"ticket\",\r\n          name: \"本科占比\",\r\n          number: \"55%\"\r\n        },\r\n        {\r\n          key: \"publicFacilities\",\r\n          name: \"硕士占比\",\r\n          number: \"25%\"\r\n        },\r\n        {\r\n          key: \"station\",\r\n          name: \"博士及以上占比\",\r\n          number: \"5%\"\r\n        }\r\n      ],\r\n      Street: \"\",\r\n      myChart: null,\r\n      automyChart: null\r\n    };\r\n  },\r\n  methods: {\r\n    createPolygon() {\r\n      new GDrawSketch(window.mapview).then(gDraw => {\r\n        this.gDraw = gDraw;\r\n        this.gDraw.create(\"polygon\");\r\n        this.gDraw.on(\"create-complete\", e => {\r\n          let shape = mapApi.convert.toWKTByGeometry.ToWKT(e.geometry);\r\n      \r\n          this.autoshape = shape;\r\n          parent.onemap.pubsub.publish(\"drawPolygon\", shape);\r\n        });\r\n      });\r\n    },\r\n    autoPolygon() {\r\n      this.PublicFacility2 = true;\r\n      if (!this.automyChart) {\r\n        this.automyChart = echarts.init(document.getElementById(\"charts\"));\r\n      }\r\n      var _this = this;\r\n      Server.post({\r\n        url: services.autoStreet,\r\n        params: {\r\n          polygon: this.autoshape\r\n        }\r\n      }).then(function(res) {\r\n        if (res.status === 1) {\r\n          let xData = [];\r\n          let yDate = [];\r\n          _this.data1.forEach(element => {\r\n            element.number = res.data[0][element.key]; //对应返回data数据对应的key值\r\n       \r\n            xData.push(element.name);\r\n            yDate.push(res.data[0][element.key]);\r\n          });\r\n          _this.automyChart.setOption({\r\n            color: [\"#19be6b\"],\r\n            tooltip: {\r\n              trigger: \"axis\",\r\n              axisPointer: {\r\n                type: \"shadow\"\r\n              }\r\n            },\r\n            grid: {\r\n              left: \"3%\",\r\n              right: \"4%\",\r\n              bottom: \"3%\",\r\n              containLabel: true\r\n            },\r\n            xAxis: [\r\n              {\r\n                type: \"category\",\r\n                data: xData,\r\n                axisTick: {\r\n                  alignWithLabel: true\r\n                },\r\n                axisLabel: {\r\n                  interval: 0\r\n                },\r\n                axisLine: {\r\n                  show: true,\r\n                  lineStyle: {\r\n                    type: \"dotted\",\r\n                    color: \"#696969\"\r\n                  }\r\n                }\r\n              }\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: \"value\"\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: \"数量\",\r\n                type: \"bar\",\r\n                barWidth: \"40%\",\r\n                data: yDate,\r\n                label: {\r\n                  normal: {\r\n                    show: true,\r\n                    position: \"top\"\r\n                  }\r\n                }\r\n              }\r\n            ]\r\n          });\r\n        } else {\r\n          this.$Message.error(rsp.message);\r\n        }\r\n      });\r\n    },\r\n    getStreet() {\r\n      this.PublicFacility2 = true;\r\n      if (!this.myChart) {\r\n        this.myChart = echarts.init(document.getElementById(\"charts\"));\r\n      }\r\n      var _this = this;\r\n      Server.get({\r\n        url: services.streetquery,\r\n        params: {\r\n          name: _this.Street\r\n        }\r\n      }).then(function(res) {\r\n        let xData = [];\r\n        let yDate = [];\r\n        _this.data1.forEach(element => {\r\n          element.number = res.data[0][element.key]; //对应返回data数据对应的key值\r\n      \r\n          xData.push(element.name);\r\n          yDate.push(res.data[0][element.key]);\r\n        });\r\n        _this.myChart.setOption({\r\n          color: [\"#19be6b\"],\r\n          tooltip: {\r\n            trigger: \"axis\",\r\n            axisPointer: {\r\n              type: \"shadow\"\r\n            }\r\n          },\r\n          grid: {\r\n            left: \"3%\",\r\n            right: \"4%\",\r\n            bottom: \"3%\",\r\n            containLabel: true\r\n          },\r\n          xAxis: [\r\n            {\r\n              type: \"category\",\r\n              data: xData,\r\n              axisTick: {\r\n                alignWithLabel: true\r\n              },\r\n              axisLabel: {\r\n                interval: 0\r\n              },\r\n              axisLine: {\r\n                show: true,\r\n                lineStyle: {\r\n                  type: \"dotted\",\r\n                  color: \"#696969\"\r\n                }\r\n              }\r\n            }\r\n          ],\r\n          yAxis: [\r\n            {\r\n              type: \"value\"\r\n            }\r\n          ],\r\n          series: [\r\n            {\r\n              name: \"数量\",\r\n              type: \"bar\",\r\n              barWidth: \"40%\",\r\n              data: yDate,\r\n              label: {\r\n                normal: {\r\n                  show: true,\r\n                  position: \"top\"\r\n                }\r\n              }\r\n            }\r\n          ]\r\n        });\r\n      });\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    this.$root.Bus.$off(\"eventSelectHouse\");\r\n  }\r\n};\r\n</script>\r\n "],"sourceRoot":"src\\views\\infoSearch\\inforCount"}]}