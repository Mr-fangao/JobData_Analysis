{"remainingRequest":"C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\src\\map\\api\\js\\convert\\GWKT2Geometry.js","dependencies":[{"path":"C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\src\\map\\api\\js\\convert\\GWKT2Geometry.js","mtime":1563098587000},{"path":"C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1580901136398},{"path":"C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _slicedToArray from \"C:\\\\Users\\\\asus\\\\Desktop\\\\GIS\\u76F8\\u5173\\u6BD4\\u8D5B\\\\03 \\u8BA1\\u7B97\\u673A\\u8BBE\\u8BA1\\u5927\\u8D5B(\\u521A\\u5F00\\u59CB)\\\\03 \\u7CFB\\u7EDF\\u8FD0\\u884C\\u4EE3\\u7801\\\\Code\\\\\\u524D\\u7AEF\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/slicedToArray\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport _classCallCheck from \"C:\\\\Users\\\\asus\\\\Desktop\\\\GIS\\u76F8\\u5173\\u6BD4\\u8D5B\\\\03 \\u8BA1\\u7B97\\u673A\\u8BBE\\u8BA1\\u5927\\u8D5B(\\u521A\\u5F00\\u59CB)\\\\03 \\u7CFB\\u7EDF\\u8FD0\\u884C\\u4EE3\\u7801\\\\Code\\\\\\u524D\\u7AEF\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\asus\\\\Desktop\\\\GIS\\u76F8\\u5173\\u6BD4\\u8D5B\\\\03 \\u8BA1\\u7B97\\u673A\\u8BBE\\u8BA1\\u5927\\u8D5B(\\u521A\\u5F00\\u59CB)\\\\03 \\u7CFB\\u7EDF\\u8FD0\\u884C\\u4EE3\\u7801\\\\Code\\\\\\u524D\\u7AEF\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/createClass\";\n\nvar WKTUtil =\n/*#__PURE__*/\nfunction () {\n  function WKTUtil(options) {\n    _classCallCheck(this, WKTUtil);\n\n    this.regExes = {\n      \"typeStr\": /^\\s*(\\w+)\\s*\\s∗(.∗)\\s∗\\s*$/,\n      \"spaces\": /\\s+/,\n      \"parenComma\": /\\)\\s*,\\s*\\(/,\n      \"doubleParenComma\": /\\)\\s*\\)\\s*,\\s*\\(\\s*\\(/,\n      // can\"t use {2} here\n      \"trimParen\": /^\\s*?(.∗?)?\\s*$/\n    };\n\n    for (var i in options) {\n      this[i] = options[i];\n    }\n\n    this.parse = this.parse();\n  }\n\n  _createClass(WKTUtil, [{\n    key: \"trim\",\n    value: function trim(str) {\n      return str.replace(/^\\s\\s*/, \"\").replace(/\\s\\s*$/, \"\");\n    }\n  }, {\n    key: \"read\",\n    value: function read(wkt) {\n      var features;\n      var type;\n      var str;\n      var wkts = [];\n      wkt = wkt.replace(/[\\n\\r]/g, \" \");\n      var matches = wkt.split(\"(\");\n\n      if (matches) {\n        type = matches[0].toLowerCase().replace(\" \", \"\");\n\n        if (type.indexOf(\"polygon\") > -1) {\n          if (matches.length === 3) {\n            str = matches[2].replace(\"))\", \"\");\n            wkts.push(str);\n          } else {\n            // 孔洞或者多面情况\n            for (var a = 2; a < matches.length; a++) {\n              str = matches[a].replace(/\\),/g, \"\").replace(/\\)/g, \"\");\n\n              if (str) {\n                wkts.push(str);\n              }\n            }\n          }\n        } else {\n          if (type === \"multilinestring\") {\n            for (var _a = 2; _a < matches.length - 1; _a++) {\n              str = matches[_a].replace(\"),\", \"\");\n              wkts.push(str);\n            }\n\n            wkts.push(matches[matches.length - 1].replace(\"))\", \"\"));\n          } else {\n            str = matches[1].replace(\")\", \"\");\n            wkts.push(str);\n          }\n        }\n\n        if (this.parse[type]) {\n          features = this.parse[type].apply(this, [wkts.join(\"@\")]);\n        }\n      }\n\n      return features;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse() {\n      return {\n        point: function point(str) {\n          var coords = this.trim(str).split(this.regExes.spaces);\n          return coords;\n        },\n        multipoint: function multipoint(str) {\n          var point;\n          var points = this.trim(str).split(\",\");\n          var components = [];\n\n          for (var i = 0, len = points.length; i < len; ++i) {\n            point = points.replace(this.regExes.trimParen, \"$1\");\n            components.push(this.parse.point.apply(this, [point]).geometry);\n          }\n\n          return components;\n        },\n        linestring: function linestring(str) {\n          var points = this.trim(str).split(\",\");\n          var components = [];\n\n          for (var i = 0, len = points.length; i < len; ++i) {\n            components.push(this.parse.point.apply(this, [points[i]]));\n          }\n\n          return components;\n        },\n        multilinestring: function multilinestring(str) {\n          var lines = this.trim(str).split(\"@\");\n          var components = [];\n\n          for (var i = 0, len = lines.length; i < len; ++i) {\n            components.push(this.parse.linestring.apply(this, [lines[i]]));\n          }\n\n          return components;\n        },\n        polygon: function polygon(str) {\n          var _this = this;\n\n          var ring;\n          var linestring;\n          var strs = str.split(\"@\");\n          var components = [];\n          strs.forEach(function (str) {\n            var rings = _this.trim(str).split(_this.regExes.parenComma);\n\n            for (var i = 0, len = rings.length; i < len; ++i) {\n              ring = rings[i].replace(_this.regExes.trimParen, \"$1\");\n              linestring = _this.parse.linestring.apply(_this, [ring]);\n              components.push(linestring);\n            }\n          });\n          return components;\n        },\n        multipolygon: function multipolygon(wkt) {\n          var strs = wkt.split(\"@\");\n          var components = [];\n\n          for (var i = 0, len = strs.length; i < len; ++i) {\n            components.push(this.parse.linestring.apply(this, [strs[i]]));\n          }\n\n          return components;\n        }\n      };\n    }\n  }]);\n\n  return WKTUtil;\n}();\n\nvar WKTToGeometry =\n/*#__PURE__*/\nfunction () {\n  function WKTToGeometry() {\n    _classCallCheck(this, WKTToGeometry);\n  }\n\n  _createClass(WKTToGeometry, [{\n    key: \"point\",\n    value: function point(options) {\n      return new Promise(function (resolve) {\n        mapApi.esriApi.GetPoint().then(function (Point) {\n          var wktUtil = new WKTUtil();\n          var pt = wktUtil.read(options.wkt);\n          var json = {\n            x: parseFloat(pt[0]),\n            y: parseFloat(pt[1]),\n            spatialReference: options.spatialReference\n          };\n          var point = new Point(json);\n          resolve(point);\n        });\n      });\n    }\n  }, {\n    key: \"polyLine\",\n    value: function polyLine(options) {\n      return new Promise(function (resolve) {\n        mapApi.esriApi.GetPolyline().then(function (Polyline) {\n          var wktUtil = new WKTUtil();\n          var points = wktUtil.read(options.wkt);\n          var json = {\n            paths: [points],\n            spatialReference: options.spatialReference\n          };\n          var polyLine = new Polyline(json);\n          resolve(polyLine);\n        });\n      });\n    }\n  }, {\n    key: \"multiPolyLine\",\n    value: function multiPolyLine(options) {\n      return new Promise(function (resolve) {\n        mapApi.esriApi.GetPolyline().then(function (Polyline) {\n          var wktUtil = new WKTUtil();\n          var polyLines = wktUtil.read(options.wkt);\n          var polyLine = new Polyline(options.spatialReference);\n          polyLines.forEach(function (index, item) {\n            polyLine.addPath(item);\n          });\n          resolve(polyLine);\n        });\n      });\n    }\n  }, {\n    key: \"polygon\",\n    value: function polygon(options) {\n      return new Promise(function (resolve) {\n        Promise.all([mapApi.esriApi.GetPoint(), mapApi.esriApi.GetPolygon()]).then(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              Point = _ref2[0],\n              Polygon = _ref2[1];\n\n          var wktUtil = new WKTUtil();\n          var points = wktUtil.read(options.wkt);\n          var json = {\n            rings: points,\n            spatialReference: options.spatialReference\n          };\n          var polygon = new Polygon(json);\n          resolve(polygon);\n        });\n      });\n    }\n  }, {\n    key: \"multiPolygon\",\n    value: function multiPolygon(options) {\n      return new Promise(function (resolve) {\n        Promise.all([mapApi.esriApi.GetPoint(), mapApi.esriApi.GetPolygon()]).then(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 2),\n              Point = _ref4[0],\n              Polygon = _ref4[1];\n\n          var wktUtil = new WKTUtil();\n          var polygons = wktUtil.read(options.wkt);\n          var polygon = new Polygon({\n            spatialReference: options.spatialReference\n          });\n          polygons.forEach(function (item) {\n            polygon.addRing(item);\n          });\n          resolve(polygon);\n        });\n      });\n    }\n  }]);\n\n  return WKTToGeometry;\n}();\n\nvar GWKT2Geometry =\n/*#__PURE__*/\nfunction () {\n  function GWKT2Geometry() {\n    _classCallCheck(this, GWKT2Geometry);\n  }\n\n  _createClass(GWKT2Geometry, [{\n    key: \"parse\",\n    value: function parse(options) {\n      var wkt = options.wkt;\n      var type = wkt.split(\"(\")[0].toLowerCase();\n      var wktToGeometry = new WKTToGeometry();\n\n      switch (type.replace(\" \", \"\")) {\n        case \"point\":\n        case \"multipoint\":\n          return wktToGeometry.point(options);\n\n        case \"linestring\":\n          return wktToGeometry.polyLine(options);\n\n        case \"multilinestring\":\n          return wktToGeometry.multiPolyLine(options);\n\n        case \"polygon\":\n          return wktToGeometry.polygon(options);\n\n        case \"multipolygon\":\n          return wktToGeometry.multiPolygon(options);\n\n        default:\n          return new Promise(function (resolve) {\n            resolve(null);\n          });\n      }\n    }\n  }]);\n\n  return GWKT2Geometry;\n}();\n\nexport { GWKT2Geometry as default };",{"version":3,"sources":["C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\src\\map\\api\\js\\convert\\GWKT2Geometry.js"],"names":["WKTUtil","options","regExes","i","parse","str","replace","wkt","features","type","wkts","matches","split","toLowerCase","indexOf","length","push","a","apply","join","point","coords","trim","spaces","multipoint","points","components","len","trimParen","geometry","linestring","multilinestring","lines","polygon","_this","ring","strs","forEach","rings","parenComma","multipolygon","WKTToGeometry","Promise","resolve","mapApi","esriApi","GetPoint","then","wktUtil","pt","read","json","x","parseFloat","y","spatialReference","Point","GetPolyline","paths","polyLine","Polyline","polyLines","index","item","addPath","all","GetPolygon","Polygon","polygons","addRing","GWKT2Geometry","wktToGeometry","multiPolyLine","multiPolygon"],"mappings":"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","sourcesContent":["class WKTUtil {\n  constructor(options) {\n    this.regExes = {\n      \"typeStr\": /^\\s*(\\w+)\\s*\\s∗(.∗)\\s∗\\s*$/,\n      \"spaces\": /\\s+/,\n      \"parenComma\": /\\)\\s*,\\s*\\(/,\n      \"doubleParenComma\": /\\)\\s*\\)\\s*,\\s*\\(\\s*\\(/, // can\"t use {2} here\n      \"trimParen\": /^\\s*?(.∗?)?\\s*$/\n    };\n    for (var i in options) {\n      this[i] = options[i];\n    }\n\n    this.parse = this.parse();\n  }\n\n  trim(str) {\n    return str.replace(/^\\s\\s*/, \"\").replace(/\\s\\s*$/, \"\");\n  }\n\n  read(wkt) {\n    let features;\n    let type;\n    let str;\n    let wkts = [];\n    wkt = wkt.replace(/[\\n\\r]/g, \" \");\n    let matches = wkt.split(\"(\");\n    if (matches) {\n      type = matches[0].toLowerCase().replace(\" \", \"\");\n      if (type.indexOf(\"polygon\") > -1) {\n        if (matches.length === 3) {\n          str = matches[2].replace(\"))\", \"\");\n          wkts.push(str);\n        } else {\n          // 孔洞或者多面情况\n          for (let a = 2; a < matches.length; a++) {\n            str = matches[a].replace(/\\),/g, \"\").replace(/\\)/g, \"\");\n            if (str) {\n              wkts.push(str);\n            }\n          }\n        }\n      } else {\n        if (type === \"multilinestring\") {\n          for (let a = 2; a < matches.length - 1; a++) {\n            str = matches[a].replace(\"),\", \"\");\n            wkts.push(str);\n          }\n          wkts.push(matches[matches.length - 1].replace(\"))\", \"\"));\n        } else {\n          str = matches[1].replace(\")\", \"\");\n          wkts.push(str);\n        }\n      }\n      if (this.parse[type]) {\n        features = this.parse[type].apply(this, [wkts.join(\"@\")]);\n      }\n    }\n    return features;\n  }\n\n  parse() {\n    return {\n      point(str) {\n        let coords = this.trim(str).split(this.regExes.spaces);\n        return coords;\n      },\n      multipoint: function (str) {\n        let point;\n        let points = this.trim(str).split(\",\");\n        let components = [];\n        for (let i = 0, len = points.length; i < len; ++i) {\n          point = points.replace(this.regExes.trimParen, \"$1\");\n          components.push(this.parse.point.apply(this, [point]).geometry);\n        }\n        return components;\n      },\n      linestring: function (str) {\n        let points = this.trim(str).split(\",\");\n        let components = [];\n        for (let i = 0, len = points.length; i < len; ++i) {\n          components.push(this.parse.point.apply(this, [points[i]]));\n        }\n        return components;\n      },\n      multilinestring: function (str) {\n        let lines = this.trim(str).split(\"@\");\n        let components = [];\n        for (let i = 0, len = lines.length; i < len; ++i) {\n          components.push(this.parse.linestring.apply(this, [lines[i]]));\n        }\n        return components;\n      },\n      polygon: function (str) {\n        let _this = this;\n        let ring;\n        let linestring;\n        let strs = str.split(\"@\");\n        let components = [];\n        strs.forEach(function (str) {\n          let rings = _this.trim(str).split(_this.regExes.parenComma);\n          for (let i = 0, len = rings.length; i < len; ++i) {\n            ring = rings[i].replace(_this.regExes.trimParen, \"$1\");\n            linestring = _this.parse.linestring.apply(_this, [ring]);\n            components.push(linestring);\n          }\n        });\n        return components;\n      },\n      multipolygon: function (wkt) {\n        let strs = wkt.split(\"@\");\n        let components = [];\n        for (let i = 0, len = strs.length; i < len; ++i) {\n          components.push(this.parse.linestring.apply(this, [strs[i]]));\n        }\n        return components;\n      }\n    };\n  }\n}\nclass WKTToGeometry {\n  point(options) {\n    return new Promise(function (resolve) {\n      mapApi.esriApi.GetPoint().then(Point => {\n        var wktUtil = new WKTUtil();\n        var pt = wktUtil.read(options.wkt);\n        var json = {\n          x: parseFloat(pt[0]),\n          y: parseFloat(pt[1]),\n          spatialReference: options.spatialReference\n        };\n\n        var point = new Point(json);\n        resolve(point);\n      })\n    });\n  }\n\n  polyLine(options) {\n    return new Promise(function (resolve) {\n      mapApi.esriApi.GetPolyline().then(Polyline => {\n        var wktUtil = new WKTUtil();\n        var points = wktUtil.read(options.wkt);\n        var json = {\n          paths: [points],\n          spatialReference: options.spatialReference\n        };\n        var polyLine = new Polyline(json);\n        resolve(polyLine);\n      });\n    });\n  }\n\n  multiPolyLine(options) {\n    return new Promise(function (resolve) {\n      mapApi.esriApi.GetPolyline().then(Polyline => {\n        var wktUtil = new WKTUtil();\n        var polyLines = wktUtil.read(options.wkt);\n        var polyLine = new Polyline(options.spatialReference);\n        polyLines.forEach(function (index, item) {\n          polyLine.addPath(item);\n        });\n        resolve(polyLine);\n      });\n    });\n  }\n\n  polygon(options) {\n    return new Promise(function (resolve) {\n      Promise.all([mapApi.esriApi.GetPoint(), mapApi.esriApi.GetPolygon()]).then(([Point, Polygon]) => {\n        var wktUtil = new WKTUtil();\n        var points = wktUtil.read(options.wkt);\n        var json = {\n          rings: points,\n          spatialReference: options.spatialReference\n        };\n        var polygon = new Polygon(json);\n        resolve(polygon);\n      });\n    });\n  }\n\n  multiPolygon(options) {\n    return new Promise(function (resolve) {\n      Promise.all([mapApi.esriApi.GetPoint(), mapApi.esriApi.GetPolygon()]).then(([Point, Polygon]) => {\n        var wktUtil = new WKTUtil();\n        var polygons = wktUtil.read(options.wkt);\n        var polygon = new Polygon({\n          spatialReference: options.spatialReference\n        });\n        polygons.forEach(function (item) {\n          polygon.addRing(item);\n        });\n        resolve(polygon);\n      });\n    });\n  }\n}\n\nexport default class GWKT2Geometry {\n  parse(options) {\n    let wkt = options.wkt;\n    let type = wkt.split(\"(\")[0].toLowerCase();\n    let wktToGeometry = new WKTToGeometry();\n    switch (type.replace(\" \", \"\")) {\n      case \"point\":\n      case \"multipoint\":\n        return wktToGeometry.point(options);\n      case \"linestring\":\n        return wktToGeometry.polyLine(options);\n      case \"multilinestring\":\n        return wktToGeometry.multiPolyLine(options);\n      case \"polygon\":\n        return wktToGeometry.polygon(options);\n      case \"multipolygon\":\n        return wktToGeometry.multiPolygon(options);\n      default:\n        return new Promise(function (resolve) {\n          resolve(null);\n        });\n    }\n  }\n}\n"]}]}