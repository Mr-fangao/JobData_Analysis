{"remainingRequest":"C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\src\\map\\api\\4+\\api\\GMeasureArea.js","dependencies":[{"path":"C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\src\\map\\api\\4+\\api\\GMeasureArea.js","mtime":1563098587000},{"path":"C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1580901136398},{"path":"C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport _slicedToArray from \"C:\\\\Users\\\\asus\\\\Desktop\\\\GIS\\u76F8\\u5173\\u6BD4\\u8D5B\\\\03 \\u8BA1\\u7B97\\u673A\\u8BBE\\u8BA1\\u5927\\u8D5B(\\u521A\\u5F00\\u59CB)\\\\03 \\u7CFB\\u7EDF\\u8FD0\\u884C\\u4EE3\\u7801\\\\Code\\\\\\u524D\\u7AEF\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/slicedToArray\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _classCallCheck from \"C:\\\\Users\\\\asus\\\\Desktop\\\\GIS\\u76F8\\u5173\\u6BD4\\u8D5B\\\\03 \\u8BA1\\u7B97\\u673A\\u8BBE\\u8BA1\\u5927\\u8D5B(\\u521A\\u5F00\\u59CB)\\\\03 \\u7CFB\\u7EDF\\u8FD0\\u884C\\u4EE3\\u7801\\\\Code\\\\\\u524D\\u7AEF\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\asus\\\\Desktop\\\\GIS\\u76F8\\u5173\\u6BD4\\u8D5B\\\\03 \\u8BA1\\u7B97\\u673A\\u8BBE\\u8BA1\\u5927\\u8D5B(\\u521A\\u5F00\\u59CB)\\\\03 \\u7CFB\\u7EDF\\u8FD0\\u884C\\u4EE3\\u7801\\\\Code\\\\\\u524D\\u7AEF\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/createClass\";\n\n/* eslint-disable */\nimport { esriApi } from \"../GEsriApi\";\n\nvar GMeasureArea =\n/*#__PURE__*/\nfunction () {\n  function GMeasureArea(opt) {\n    var _this = this;\n\n    _classCallCheck(this, GMeasureArea);\n\n    this.view = opt.mapView;\n    this.body = document.getElementById(\"viewDiv\");\n    this.area = 0;\n    this.activePolygon = null;\n    this.isDrawActive = false;\n    this.units = \"square-meters\";\n    this.tooltip = null;\n    this.graphicLayer = null;\n    this.pointerDownListener = null;\n    this.pointerMoveListener = null;\n    this.doubleClickListener = null;\n    this.viewExtentChange = null; //register\n\n    this.register(); //load api\n\n    return new Promise(function (resolve) {\n      Promise.all([esriApi.GetGraphicsLayer(), esriApi.GetPolygon(), esriApi.GetGraphic(), esriApi.GetgeometryEngine()]).then(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 4),\n            GraphicsLayer = _ref2[0],\n            Polygon = _ref2[1],\n            Graphic = _ref2[2],\n            geometryEngine = _ref2[3];\n\n        _this.drawingSymbol = {\n          type: \"simple-fill\",\n          color: [102, 0, 255, 0.15],\n          outline: {\n            color: \"red\",\n            style: \"dash\",\n            width: 1.5\n          }\n        };\n        _this.finishedSymbol = {\n          type: \"simple-fill\",\n          color: [102, 0, 255, 0.15],\n          outline: {\n            color: \"red\",\n            style: \"dash\",\n            width: 1.5\n          }\n        };\n        _this.markerSymbol = {\n          type: \"simple-marker\",\n          style: \"circle\",\n          color: \"white\",\n          size: \"10px\",\n          // pixels\n          outline: {\n            // autocasts as esri/symbols/SimpleLineSymbol\n            color: 'red',\n            width: 1.5 // points\n\n          }\n        };\n        _this.GraphicsLayer = GraphicsLayer;\n        _this.Polygon = Polygon;\n        _this.Graphic = Graphic;\n        _this.geometryEngine = geometryEngine;\n        resolve(_this);\n      });\n    });\n  }\n\n  _createClass(GMeasureArea, [{\n    key: \"register\",\n    value: function register() {\n      var _this2 = this;\n\n      onemap.pubsub.subscribe(\"clear\", function (e) {\n        _this2.close();\n      });\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      this.view.isEdit = true;\n\n      if (!this.isDrawActive) {\n        this.close();\n        this.createGraphicLayer();\n        this.createTooltipNode();\n        this.activateDraw();\n      } else {\n        this.deactivateDraw();\n        this.clearPolygon();\n      }\n    }\n  }, {\n    key: \"createTooltipNode\",\n    value: function createTooltipNode() {\n      this.tooltip = document.createElement('span');\n      this.tooltip.className = \"onemap-measure tooltip\";\n      this.body.appendChild(this.tooltip);\n    } //创建承载面的图层\n\n  }, {\n    key: \"createGraphicLayer\",\n    value: function createGraphicLayer() {\n      if (this.graphicLayer === null) {\n        this.graphicLayer = new this.GraphicsLayer();\n        this.view.map.add(this.graphicLayer);\n      } else {\n        this.graphicLayer.removeAll();\n      }\n    }\n  }, {\n    key: \"activateDraw\",\n    value: function activateDraw() {\n      var self = this;\n      this.isDrawActive = true;\n      this.clearPolygon();\n      this.pointerDownListener = this.view.on('pointer-down', function (event) {\n        event.stopPropagation();\n        var point = self.createPoint(event);\n        self.showMarker(point);\n        self.addVertex(point);\n      });\n      this.pointerMoveListener = this.view.on(\"pointer-move\", function (event) {\n        if (self.activePolygon) {\n          event.stopPropagation();\n          var point = self.createPoint(event);\n          self.updateFinalVertex(point);\n        }\n      });\n      this.doubleClickListener = this.view.on(\"double-click\", function (event) {\n        onemap.pubsub.publish(\"changeCursor\", \"pointer\");\n        event.stopPropagation();\n        var searchArea = self.addVertex(event.mapPoint, true);\n\n        if (!searchArea) {\n          return null;\n        }\n\n        self.deactivateDraw();\n      });\n      this.viewExtentChange = this.view.watch('extent', function () {\n        var screenPoint = self.view.toScreen(self.tooltip.point);\n        self.tooltip.style.left = screenPoint.x + 10 + \"px\";\n        self.tooltip.style.top = screenPoint.y + 10 + \"px\";\n      });\n    }\n  }, {\n    key: \"deactivateDraw\",\n    value: function deactivateDraw() {\n      this.isDrawActive = false;\n      this.activePolygon = null;\n      this.pointerDownListener.remove();\n      this.pointerMoveListener.remove();\n      this.doubleClickListener.remove();\n    }\n  }, {\n    key: \"createPoint\",\n    value: function createPoint(event) {\n      return this.view.toMap(event);\n    }\n  }, {\n    key: \"addVertex\",\n    value: function addVertex(point, isFinal) {\n      var polygon = this.activePolygon;\n      var ringLength;\n\n      if (!polygon) {\n        polygon = new this.Polygon({\n          spatialReference: this.view.spatialReference\n        });\n        polygon.addRing([point, point]);\n      } else {\n        ringLength = polygon.rings[0].length;\n        polygon.insertPoint(0, ringLength - 1, point);\n      }\n\n      this.activePolygon = polygon;\n      return this.redrawPolygon(polygon, isFinal);\n    }\n  }, {\n    key: \"redrawPolygon\",\n    value: function redrawPolygon(polygon, finished) {\n      var geometry = finished ? this.geometryEngine.simplify(polygon) : polygon;\n\n      if (!geometry && finished) {\n        console.log(\"Cannot finish polygon. It must be a triangle at minimum. Resume drawing...\");\n        return null;\n      }\n\n      this.clearPolygon();\n      var polygonGraphic = new this.Graphic({\n        geometry: geometry,\n        symbol: finished ? this.finishedSymbol : this.drawingSymbol\n      });\n      this.graphicLayer.add(polygonGraphic);\n      return geometry;\n    }\n  }, {\n    key: \"updateFinalVertex\",\n    value: function updateFinalVertex(point) {\n      var polygon = this.activePolygon.clone();\n      var ringLength = polygon.rings[0].length;\n      polygon.insertPoint(0, ringLength - 1, point);\n      this.measurePolygon(polygon);\n      this.redrawPolygon(polygon);\n      var point = polygon.centroid;\n\n      if (point.x < 0 && point.y < 0) {\n        point.x = -point.x;\n        point.y = -point.y;\n      }\n\n      var event = this.view.toScreen(point);\n      this.showToolTip(event.x, event.y, point);\n    }\n  }, {\n    key: \"measurePolygon\",\n    value: function measurePolygon(polygon) {\n      this.area = this.geometryEngine.planarArea(polygon, this.units).toFixed(2);\n      this.area = Math.abs(this.area);\n      return this.area;\n    }\n  }, {\n    key: \"clearPolygon\",\n    value: function clearPolygon() {\n      var polygonGraphic = this.graphicLayer.graphics.find(function (graphic) {\n        return graphic.geometry.type === \"polygon\";\n      });\n\n      if (polygonGraphic) {\n        this.graphicLayer.remove(polygonGraphic);\n      }\n    }\n  }, {\n    key: \"showMarker\",\n    value: function showMarker(point) {\n      var markerFeature = new this.Graphic({\n        geometry: point,\n        symbol: this.markerSymbol\n      });\n      this.view.graphics.add(markerFeature);\n    }\n  }, {\n    key: \"showToolTip\",\n    value: function showToolTip(x, y, p) {\n      if (this.area === 0) return false;\n      this.tooltip.point = p;\n\n      if (this.area > 1000000) {\n        this.tooltip.innerText = (this.area / 1000000).toFixed(2) + \"平方公里\";\n      } else {\n        this.tooltip.innerText = this.area + \"平方米\";\n      }\n\n      this.tooltip.style.left = x + 10 + \"px\";\n      this.tooltip.style.top = y + \"px\";\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (this.viewExtentChange != null) {\n        this.viewExtentChange.remove();\n      }\n\n      this.view.graphics.removeAll();\n\n      if (this.graphicLayer !== null) {\n        this.view.map.remove(this.graphicLayer);\n        this.graphicLayer = null;\n      }\n\n      console.log(this.tooltip);\n\n      if (this.tooltip) {\n        this.body.removeChild(this.tooltip);\n        this.tooltip = null;\n      }\n    }\n  }]);\n\n  return GMeasureArea;\n}();\n\nexport default GMeasureArea;",{"version":3,"sources":["C:\\Users\\asus\\Desktop\\GIS相关比赛\\03 计算机设计大赛(刚开始)\\03 系统运行代码\\Code\\前端\\src\\map\\api\\4+\\api\\GMeasureArea.js"],"names":["esriApi","GMeasureArea","opt","view","mapView","body","document","getElementById","area","activePolygon","isDrawActive","units","tooltip","graphicLayer","pointerDownListener","pointerMoveListener","doubleClickListener","viewExtentChange","register","Promise","all","GetGraphicsLayer","GetPolygon","GetGraphic","GetgeometryEngine","then","GraphicsLayer","Polygon","Graphic","geometryEngine","drawingSymbol","type","color","outline","style","width","finishedSymbol","markerSymbol","size","resolve","onemap","pubsub","subscribe","close","isEdit","createGraphicLayer","createTooltipNode","activateDraw","deactivateDraw","clearPolygon","createElement","className","appendChild","map","add","removeAll","self","on","event","stopPropagation","point","createPoint","showMarker","addVertex","updateFinalVertex","publish","searchArea","mapPoint","watch","screenPoint","toScreen","left","x","top","y","remove","toMap","isFinal","polygon","ringLength","spatialReference","addRing","rings","length","insertPoint","redrawPolygon","finished","geometry","simplify","console","log","polygonGraphic","symbol","clone","measurePolygon","centroid","showToolTip","planarArea","toFixed","Math","abs","graphics","find","graphic","markerFeature","p","innerText","removeChild"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport {\n  esriApi\n} from \"../GEsriApi\"\nclass GMeasureArea {\n  constructor(opt) {\n    this.view = opt.mapView;\n    this.body = document.getElementById(\"viewDiv\");\n    this.area = 0;\n    this.activePolygon = null;\n    this.isDrawActive = false;\n    this.units = \"square-meters\";\n    this.tooltip = null;\n    this.graphicLayer = null;\n\n    this.pointerDownListener = null;\n    this.pointerMoveListener = null;\n    this.doubleClickListener = null;\n    this.viewExtentChange = null;\n    //register\n    this.register();\n    //load api\n    return new Promise(resolve => {\n      Promise.all([\n        esriApi.GetGraphicsLayer(),\n        esriApi.GetPolygon(),\n        esriApi.GetGraphic(),\n        esriApi.GetgeometryEngine()\n      ]).then(([GraphicsLayer, Polygon, Graphic, geometryEngine]) => {\n        this.drawingSymbol = {\n          type: \"simple-fill\",\n          color: [102, 0, 255, 0.15],\n          outline: {\n            color: \"red\",\n            style: \"dash\",\n            width: 1.5\n          }\n        };\n        this.finishedSymbol = {\n          type: \"simple-fill\",\n          color: [102, 0, 255, 0.15],\n          outline: {\n            color: \"red\",\n            style: \"dash\",\n            width: 1.5\n          }\n        };\n        this.markerSymbol = {\n          type: \"simple-marker\",\n          style: \"circle\",\n          color: \"white\",\n          size: \"10px\", // pixels\n          outline: { // autocasts as esri/symbols/SimpleLineSymbol\n            color: 'red',\n            width: 1.5 // points\n          }\n        };\n        this.GraphicsLayer = GraphicsLayer;\n        this.Polygon = Polygon;\n        this.Graphic = Graphic;\n        this.geometryEngine = geometryEngine;\n        resolve(this);\n      });\n    });\n  }\n\n  register() {\n    onemap.pubsub.subscribe(\"clear\", e => {\n      this.close();\n    })\n  }\n\n  start() {\n    this.view.isEdit = true;\n    if (!this.isDrawActive) {\n      this.close();\n      this.createGraphicLayer();\n      this.createTooltipNode();\n      this.activateDraw();\n    } else {\n      this.deactivateDraw();\n      this.clearPolygon();\n    }\n  }\n\n  createTooltipNode() {\n    this.tooltip = document.createElement('span');\n    this.tooltip.className = \"onemap-measure tooltip\";\n    this.body.appendChild(this.tooltip);\n  }\n\n  //创建承载面的图层\n  createGraphicLayer() {\n    if (this.graphicLayer === null) {\n      this.graphicLayer = new this.GraphicsLayer();\n      this.view.map.add(this.graphicLayer);\n    } else {\n      this.graphicLayer.removeAll();\n    }\n  }\n\n  activateDraw() {\n    var self = this;\n    this.isDrawActive = true;\n    this.clearPolygon();\n    this.pointerDownListener = this.view.on('pointer-down', function (event) {\n      event.stopPropagation();\n      var point = self.createPoint(event);\n      self.showMarker(point);\n      self.addVertex(point);\n    });\n\n    this.pointerMoveListener = this.view.on(\"pointer-move\", function (event) {\n      if (self.activePolygon) {\n        event.stopPropagation();\n        var point = self.createPoint(event);\n        self.updateFinalVertex(point);\n      }\n    });\n\n    this.doubleClickListener = this.view.on(\"double-click\", function (event) {\n      onemap.pubsub.publish(\"changeCursor\", \"pointer\");\n      event.stopPropagation();\n      var searchArea = self.addVertex(event.mapPoint, true);\n      if (!searchArea) {\n        return null;\n      }\n      self.deactivateDraw();\n    });\n\n    this.viewExtentChange = this.view.watch('extent', function () {\n      var screenPoint = self.view.toScreen(self.tooltip.point);\n      self.tooltip.style.left = (screenPoint.x + 10) + \"px\";\n      self.tooltip.style.top = (screenPoint.y + 10) + \"px\";\n    });\n  }\n\n  deactivateDraw() {\n    this.isDrawActive = false;\n    this.activePolygon = null;\n\n    this.pointerDownListener.remove();\n    this.pointerMoveListener.remove();\n    this.doubleClickListener.remove();\n  }\n\n  createPoint(event) {\n    return this.view.toMap(event);\n  }\n\n  addVertex(point, isFinal) {\n    var polygon = this.activePolygon;\n    var ringLength;\n    if (!polygon) {\n      polygon = new this.Polygon({\n        spatialReference: this.view.spatialReference\n      });\n      polygon.addRing([point, point]);\n    } else {\n      ringLength = polygon.rings[0].length;\n      polygon.insertPoint(0, ringLength - 1, point);\n    }\n    this.activePolygon = polygon;\n    return this.redrawPolygon(polygon, isFinal);\n  }\n\n  redrawPolygon(polygon, finished) {\n    var geometry = finished ? this.geometryEngine.simplify(polygon) : polygon;\n    if (!geometry && finished) {\n      console.log(\n        \"Cannot finish polygon. It must be a triangle at minimum. Resume drawing...\"\n      );\n      return null;\n    }\n    this.clearPolygon();\n    var polygonGraphic = new this.Graphic({\n      geometry: geometry,\n      symbol: finished ? this.finishedSymbol : this.drawingSymbol\n    });\n    this.graphicLayer.add(polygonGraphic);\n    return geometry;\n  }\n\n  updateFinalVertex(point) {\n    var polygon = this.activePolygon.clone();\n    var ringLength = polygon.rings[0].length;\n    polygon.insertPoint(0, ringLength - 1, point);\n    this.measurePolygon(polygon);\n\n    this.redrawPolygon(polygon);\n\n    var point = polygon.centroid;\n    if (point.x < 0 && point.y < 0) {\n      point.x = -point.x;\n      point.y = -point.y;\n    }\n    var event = this.view.toScreen(point);\n    this.showToolTip(event.x, event.y, point);\n  }\n\n  measurePolygon(polygon) {\n    this.area = this.geometryEngine.planarArea(polygon, this.units).toFixed(2);\n    this.area = Math.abs(this.area);\n    return this.area;\n  }\n\n  clearPolygon() {\n    var polygonGraphic = this.graphicLayer.graphics.find(function (graphic) {\n      return graphic.geometry.type === \"polygon\";\n    });\n    if (polygonGraphic) {\n      this.graphicLayer.remove(polygonGraphic);\n    }\n  }\n\n  showMarker(point) {\n    var markerFeature = new this.Graphic({\n      geometry: point,\n      symbol: this.markerSymbol\n    });\n    this.view.graphics.add(markerFeature);\n  }\n\n  showToolTip(x, y, p) {\n    if (this.area === 0) return false;\n    this.tooltip.point = p;\n    if (this.area > 1000000) {\n      this.tooltip.innerText = (this.area / 1000000).toFixed(2) + \"平方公里\";\n    } else {\n      this.tooltip.innerText = this.area + \"平方米\";\n    }\n    this.tooltip.style.left = (x + 10) + \"px\";\n    this.tooltip.style.top = y + \"px\";\n  }\n\n  close() {\n \n    if (this.viewExtentChange != null) {\n      this.viewExtentChange.remove();\n    }\n    this.view.graphics.removeAll();\n    if (this.graphicLayer !== null) {\n      this.view.map.remove(this.graphicLayer);\n      this.graphicLayer = null;\n    }\n    console.log(this.tooltip);\n    if (this.tooltip) {\n      this.body.removeChild(this.tooltip);\n      this.tooltip = null;\n    }\n  }\n}\n\nexport default GMeasureArea;\n"]}]}